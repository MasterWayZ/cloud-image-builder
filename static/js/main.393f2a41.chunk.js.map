{"version":3,"sources":["CommitMessage.js","StatusBadgeVariantMap.js","Run.js","Runs.js","Task.js","Tasks.js","Status.js","Statuses.js","Commit.js","Commits.js","App.js","serviceWorker.js","index.js"],"names":["CommitMessage","this","props","message","filter","line","match","RegExp","map","some","instruction","Badge","style","marginRight","variant","inex","type","startsWith","replace","split","item","title","slice","React","Component","StatusBadgeVariantMap","completed","failed","exception","running","pending","unscheduled","Run","state","artifacts","images","fetch","rootUrl","taskId","run","runId","then","responseArtifactsApi","json","container","length","setState","a","name","endsWith","artifact","find","responseArtifactApi","launchConfigs","launchConfig","storageProfile","imageReference","id","console","log","catch","Button","size","href","marginLeft","image","key","substring","lastIndexOf","Runs","runs","Task","task","metadata","status","Tasks","tasks","Status","summary","showAllTasks","taskGroupId","taskCount","builds","travisApiResponse","travisBuildResults","appendToSummary","bind","combined","appender","context","pathname","URL","target_url","buildId","responseBuildsApi","matrix","x","result","taskGroupHtmlUrl","tasksApi","hostname","responseTasksApi","Intl","DateTimeFormat","year","month","day","hour","minute","timeZoneName","format","Date","updated_at","description","toLowerCase","Object","keys","t","margin","b","Statuses","contexts","cI","statuses","s","Commit","expanded","expand","window","location","commit","sha","responseGithubApiStatuses","githubCommitStatuses","Set","sort","localeCompare","Card","width","marginTop","Header","Accordion","Toggle","as","eventKey","onClick","committer","date","url","k","Image","src","author","avatar","alt","rounded","height","className","username","Collapse","Body","Commits","defaultActiveKey","commits","App","responseGithubApiCommits","githubCommits","c","html_url","login","avatar_url","verification","latest","Container","Boolean","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.393f2a41.chunk.js","sourcesContent":["import React from 'react';\nimport Badge from 'react-bootstrap/Badge';\nimport { DashCircleFill, PlusCircleFill } from 'react-bootstrap-icons';\n\nclass CommitMessage extends React.Component {\n  render() {\n    return (\n      <div>\n        {\n          this.props.message.filter(line => (\n            !line.match((new RegExp ('^(include|exclude) (environment|key|pool|region)s: .*$', 'i')))\n            &&\n            !line.match((new RegExp ('^(pool-deploy|no-ci|no-taskcluster-ci|no-travis-ci)$', 'i')))\n          )).map(line => (\n            <strong>\n              {line}<br />\n            </strong>\n          ))\n        }\n        {\n          (this.props.message.some(line => (\n            line.match(/^(include|exclude) (environment|key|pool|region)s: .*$/i)\n            ||\n            line.match(/^(pool-deploy|no-ci|no-taskcluster-ci|no-travis-ci)$/i)\n          )))\n            ? (\n                (this.props.message.filter(line => (line.match(/^(pool-deploy|no-ci|no-taskcluster-ci|no-travis-ci)$/i)))).map(instruction => (\n                  <Badge\n                    style={{ marginRight: '0.7em' }}\n                    variant={(instruction === 'pool-deploy') ? 'primary' : 'dark'}>\n                    {\n                      (instruction === 'pool-deploy')\n                        ? ''\n                        : (\n                            <span>\n                              <DashCircleFill />\n                              &nbsp;\n                            </span>\n                          )\n                    }\n                    {instruction}\n                  </Badge>\n                ))\n              )\n            : (\n                <Badge variant=\"warning\">\n                  no commit syntax ci instructions\n                </Badge>\n              )\n        }\n        {\n          ['include', 'exclude'].map(inex => (\n            (this.props.message.some(line => line.match((new RegExp ('^' + inex + ' (environment|key|pool|region)s: .*$', 'i')))))\n              ? (\n                  <span>\n                    {\n                      ['environments', 'integrations', 'keys', 'pools', 'regions'].map(type => (\n                        this.props.message.filter(line => line.startsWith(inex + ' ' + type + ': ')).map(line => (\n                          line.replace(inex + ' ' + type + ': ', '').split(', ').map(item => (\n                            <Badge\n                              style={{ marginRight: '0.7em' }}\n                              variant={(inex === 'include') ? 'info' : 'dark'}\n                              title={inex + ' ' + type.slice(0, -1) + ': ' + item}>\n                              {\n                                (inex === 'include')\n                                  ? <PlusCircleFill />\n                                  : <DashCircleFill />\n                              }\n                              &nbsp;{item}\n                            </Badge>\n                          ))\n                        ))\n                      ))\n                    }\n                    <br />\n                  </span>\n                )\n              : ''\n          ))\n        }\n      </div>\n    );\n  }\n}\n\nexport default CommitMessage;\n","const StatusBadgeVariantMap = {\n  completed: 'success',\n  failed: 'danger',\n  exception: 'warning',\n  running: 'primary',\n  pending: 'info',\n  unscheduled: 'secondary'\n};\nexport default StatusBadgeVariantMap;\n","import React from 'react'\nimport Badge from 'react-bootstrap/Badge';\nimport Button from 'react-bootstrap/Button';\nimport StatusBadgeVariantMap from './StatusBadgeVariantMap';\n//import { Server } from 'react-bootstrap-icons';\n\nclass Run extends React.Component {\n  state = {\n    artifacts: [],\n    images: []\n  };\n\n  componentDidMount() {\n    fetch(this.props.rootUrl + '/api/queue/v1/task/' + this.props.taskId + '/runs/' + this.props.run.runId + '/artifacts')\n    .then(responseArtifactsApi => responseArtifactsApi.json())\n    .then((container) => {\n      if (container.artifacts && container.artifacts.length) {\n        this.setState(state => ({\n          artifacts: container.artifacts\n        }));\n        if (container.artifacts.some(a => a.name.startsWith('public/') && a.name.endsWith('.json'))) {\n          let artifact = container.artifacts.find(a => a.name.startsWith('public/') && a.name.endsWith('.json'))\n          fetch(this.props.rootUrl + '/api/queue/v1/task/' + this.props.taskId + '/runs/' + this.props.run.runId + '/artifacts/' + artifact.name)\n          .then(responseArtifactApi => responseArtifactApi.json())\n          .then((container) => {\n            if (container.launchConfigs && container.launchConfigs.length) {\n              this.setState(state => ({\n                images: container.launchConfigs.map(launchConfig => launchConfig.storageProfile.imageReference.id)\n              }));\n            } else {\n              console.log(container);\n            }\n          })\n          .catch(console.log);\n        }\n      } else {\n        console.log(container);\n      }\n    })\n    .catch(console.log);\n  }\n\n  render() {\n    return (\n      <li>\n        <Button\n          size=\"sm\"\n          href={this.props.rootUrl + '/tasks/' + this.props.taskId + '/runs/' + this.props.run.runId}\n          style={{ marginLeft: '0.7em' }}\n          variant={'outline-' + StatusBadgeVariantMap[this.props.run.state]}\n          title={'task ' + this.props.taskId + ', run ' + this.props.run.runId + ': ' + this.props.run.state}>\n          {'task ' + this.props.taskId + ', run ' + this.props.run.runId}\n        </Button>\n        {\n          (this.props.run.state === 'completed' && this.state.images.length)\n            ? (\n              <div>\n                <span>worker manager image deployments:</span>\n                <ul>\n                  {\n                    this.state.images.map(image => (\n                      <li key={image}>\n                        {image.substring(image.lastIndexOf('/') + 1)}\n                      </li>\n                    ))\n                  }\n                </ul>\n              </div>\n            )\n            : ''\n        }\n      </li>\n    );\n  }\n}\n\nexport default Run;\n","import React from 'react'\nimport Run from './Run';\n\nclass Runs extends React.Component {\n  render() {\n    return (\n      <ul>\n        {\n          this.props.runs.map(run => (\n            <Run run={run} key={run.runId} taskId={this.props.taskId} rootUrl={this.props.rootUrl} />\n          ))\n        }\n      </ul>\n    );\n  }\n}\n\nexport default Runs;\n","import React from 'react'\nimport Runs from './Runs';\n\nclass Task extends React.Component {\n  render() {\n    return (\n      <li>\n        {this.props.task.task.metadata.name}\n        &nbsp;\n        <a href={this.props.rootUrl + '/tasks/' + this.props.task.status.taskId} title={this.props.task.status.taskId}>\n          {this.props.task.status.taskId.substring(0, 7)}...\n        </a>\n        <Runs runs={this.props.task.status.runs} taskId={this.props.task.status.taskId} rootUrl={this.props.rootUrl} />\n      </li>\n    );\n  }\n}\n\nexport default Task;\n","import React from 'react'\nimport Task from './Task';\n\nclass Tasks extends React.Component {\n  render() {\n    return (\n      <ul>\n        {\n          this.props.tasks.map(task => (\n            <Task task={task} key={task.status.taskId} rootUrl={this.props.rootUrl} />\n          ))\n        }\n      </ul>\n    );\n  }\n}\n\nexport default Tasks;\n","import React from 'react'\nimport Task from './Task';\nimport Tasks from './Tasks';\nimport StatusBadgeVariantMap from './StatusBadgeVariantMap';\nimport Badge from 'react-bootstrap/Badge';\n\nclass Status extends React.Component {\n  state = {\n    summary: {\n      completed: 0,\n      failed: 0,\n      exception: 0,\n      running: 0,\n      pending: 0,\n      unscheduled: 0\n    },\n    showAllTasks: false,\n    taskGroupId: null,\n    taskCount: 0,\n    tasks: [],\n    builds: [],\n    travisApiResponse: {}\n  };\n  travisBuildResults = [\n    'completed',\n    'failed',\n  ];\n\n  constructor(props) {\n    super(props);\n    this.appendToSummary = this.appendToSummary.bind(this);\n  }\n\n  appendToSummary(summary) {\n    this.setState(state => {\n      let combined = {\n        completed: state.summary.completed + summary.completed,\n        failed: state.summary.failed + summary.failed,\n        exception: state.summary.exception + summary.exception,\n        running: state.summary.running + summary.running,\n        pending: state.summary.pending + summary.pending,\n        unscheduled: state.summary.unscheduled + summary.unscheduled\n      };\n      this.props.appender(combined);\n      return { summary: combined };\n    });\n  }\n\n  componentDidMount() {\n    switch (this.props.status.context) {\n      case 'continuous-integration/travis-ci/push':\n        let pathname = (new URL(this.props.status.target_url)).pathname;\n        let buildId = pathname.substring(pathname.lastIndexOf('/') + 1);\n        this.setState(state => ({\n          taskGroupId: buildId\n        }));\n        let buildsApi = 'https://api.travis-ci.org/repos/mozilla-platform-ops/cloud-image-builder/builds/' + buildId;\n        fetch(buildsApi)\n        .then(responseBuildsApi => responseBuildsApi.json())\n        .then((container) => {\n          if (container.matrix) {\n            this.setState(state => ({\n              taskCount: container.matrix.length,\n              builds: container.matrix,\n              travisApiResponse: container\n            }));\n            this.appendToSummary({\n              completed: container.matrix.filter(x => this.travisBuildResults[x.result] === 'completed').length,\n              failed: container.matrix.filter(x => this.travisBuildResults[x.result] === 'failed').length,\n              exception: 0,\n              running: 0,\n              pending: 0,\n              unscheduled: 0\n            });\n          }\n        })\n        .catch(console.log);\n        break;\n      default:\n        let taskGroupHtmlUrl = new URL(this.props.status.target_url);\n        let taskGroupId = this.props.status.target_url.substring(this.props.status.target_url.lastIndexOf('/') + 1);\n        this.setState(state => ({\n          taskGroupId: taskGroupId\n        }));\n        let tasksApi = 'https://' + taskGroupHtmlUrl.hostname + '/api/queue/v1/task-group/' + taskGroupId + '/list';\n        fetch(tasksApi)\n        .then(responseTasksApi => responseTasksApi.json())\n        .then((container) => {\n          if (container.tasks && container.tasks.length) {\n            this.setState(state => ({\n              taskCount: container.tasks.length,\n              tasks: container.tasks//.sort((a, b) => a.task.metadata.name.localeCompare(b.task.metadata.name))\n            }));\n            this.appendToSummary({\n              completed: container.tasks.filter(x => x.status.state === 'completed').length,\n              failed: container.tasks.filter(x => x.status.state === 'failed').length,\n              exception: container.tasks.filter(x => x.status.state === 'exception').length,\n              running: container.tasks.filter(x => x.status.state === 'running').length,\n              pending: container.tasks.filter(x => x.status.state === 'pending').length,\n              unscheduled: container.tasks.filter(x => x.status.state === 'unscheduled').length\n            });\n          }\n        })\n        .catch(console.log);\n        break;\n    }\n  }\n\n  render() {\n    return (\n      <li>\n        {\n          new Intl.DateTimeFormat('en-GB', {\n            year: 'numeric',\n            month: 'short',\n            day: '2-digit',\n            hour: 'numeric',\n            minute: 'numeric',\n            timeZoneName: 'short'\n          }).format(new Date(this.props.status.updated_at))\n        }\n        &nbsp;\n        {this.props.status.description.toLowerCase()}\n        &nbsp;\n        ({this.state.taskCount} tasks in group\n        &nbsp;\n        <a href={this.props.status.target_url} title={this.state.taskGroupId}>\n          {\n            (this.state.builds.length)\n              ? this.state.taskGroupId\n              : (this.state.taskGroupId && this.state.taskGroupId.slice(0, 7)) + '...'\n          }\n        </a>\n        &nbsp;\n        {\n          Object.keys(StatusBadgeVariantMap).map(status => (\n            (this.state.tasks.filter(t => t.status.state === status).length)\n              ? (\n                  <Badge\n                    style={{ margin: '0 1px' }}\n                    variant={StatusBadgeVariantMap[status]}\n                    title={status + ': ' + this.state.tasks.filter(t => t.status.state === status).length}>\n                    {this.state.tasks.filter(t => t.status.state === status).length}\n                  </Badge>\n                )\n              : ''\n          ))\n        }\n        {\n          [0, 1].map(result => (\n            (this.state.builds.filter(b => b.result === result).length)\n              ? (\n                  <Badge\n                    style={{ margin: '0 1px' }}\n                    variant={StatusBadgeVariantMap[this.travisBuildResults[result]]}\n                    title={this.travisBuildResults[result] + ': ' + this.state.builds.filter(b => b.result === result).length}>\n                    {this.state.builds.filter(b => b.result === result).length}\n                  </Badge>\n                )\n              : ''\n          ))\n        }\n        )\n        {\n          (this.state.showAllTasks)\n            ? <Tasks tasks={this.state.tasks} rootUrl={'https://' + (new URL(this.props.status.target_url)).hostname} />\n            : (\n                <ul>\n                  {\n                    (this.state.tasks.filter(t => t.task.metadata.name.startsWith('04 :: generate') && t.status.state === 'completed').map(task => (\n                      <Task task={task} rootUrl={'https://' + (new URL(this.props.status.target_url)).hostname} />\n                    )))\n                  }\n                </ul>\n              )\n        }\n      </li>\n    );\n  }\n}\n\nexport default Status;\n","import React from 'react'\nimport Status from './Status';\n\nclass Statuses extends React.Component {\n  state = {\n    summary: {\n      completed: 0,\n      failed: 0,\n      exception: 0,\n      running: 0,\n      pending: 0,\n      unscheduled: 0\n    }\n  };\n\n  constructor(props) {\n    super(props);\n    this.appendToSummary = this.appendToSummary.bind(this);\n  }\n\n  appendToSummary(summary) {\n    this.setState(state => {\n      let combined = {\n        completed: state.summary.completed + summary.completed,\n        failed: state.summary.failed + summary.failed,\n        exception: state.summary.exception + summary.exception,\n        running: state.summary.running + summary.running,\n        pending: state.summary.pending + summary.pending,\n        unscheduled: state.summary.unscheduled + summary.unscheduled\n      };\n      this.props.appender(combined);\n      return { summary: combined };\n    });\n  }\n\n  componentDidMount() {\n    // mock:\n    this.appendToSummary({\n      completed: 3,\n      failed: 0,\n      exception: 2,\n      running: 0,\n      pending: 0,\n      unscheduled: 0\n    });\n  }\n\n  render() {\n    return (\n      <ul>\n        {\n          this.props.contexts.map((context, cI) => (\n            <li key={cI}>\n              { context }\n              <ul>\n              {\n                // only show pending statuses if there are no others (eg: failed/completed)\n                (this.props.statuses.some(s => s.context === context && s.state !== 'pending'))\n                  ? this.props.statuses.filter(s => s.context === context && s.state !== 'pending').map((status) => (\n                    <Status status={status} key={status.id} appender={this.appendToSummary} />\n                  ))\n                  : this.props.statuses.filter(s => s.context === context).map((status) => (\n                    <Status status={status} key={status.id} appender={this.appendToSummary} />\n                  ))\n              }\n              </ul>\n            </li>\n          ))\n        }\n      </ul>\n    );\n  }\n}\n\nexport default Statuses;\n","import React from 'react'\nimport Card from 'react-bootstrap/Card';\nimport Row from 'react-bootstrap/Row';\nimport Accordion from 'react-bootstrap/Accordion';\nimport { useAccordionToggle } from 'react-bootstrap/AccordionToggle';\nimport Badge from 'react-bootstrap/Badge';\nimport Button from 'react-bootstrap/Button';\nimport Image from 'react-bootstrap/Image';\nimport CommitMessage from './CommitMessage';\nimport Statuses from './Statuses';\nimport StatusBadgeVariantMap from './StatusBadgeVariantMap';\nimport { CaretDown, CaretRight } from 'react-bootstrap-icons';\n\nclass Commit extends React.Component {\n  state = {\n    summary: {\n      completed: 0,\n      failed: 0,\n      exception: 0,\n      running: 0,\n      pending: 0,\n      unscheduled: 0\n    },\n    contexts: [],\n    statuses: [],\n    expanded: false\n  };\n\n  constructor(props) {\n    super(props);\n    this.appendToSummary = this.appendToSummary.bind(this);\n  }\n\n  appendToSummary(summary) {\n    this.setState(state => ({\n      summary: {\n        completed: state.summary.completed + summary.completed,\n        failed: state.summary.failed + summary.failed,\n        exception: state.summary.exception + summary.exception,\n        running: state.summary.running + summary.running,\n        pending: state.summary.pending + summary.pending,\n        unscheduled: state.summary.unscheduled + summary.unscheduled\n      }\n    }));\n  }\n\n  /*\n  note: to run locally, a cors proxy is required.\n\n  to install a local cors proxy:\n  $ sudo npm install -g local-cors-proxy\n\n  to run a local cors proxy with authenticated github requests:\n  $ lcp --proxyUrl https://grenade:$(pass github/grenade/token/cloud-image-builder)@api.github.com\n  */\n\n  componentDidMount() {\n    this.setState(state => ({ expanded: this.props.expand }));\n    fetch(\n      (window.location.hostname === 'localhost')\n        ? 'http://localhost:8010/proxy/repos/mozilla-platform-ops/cloud-image-builder/commits/' + this.props.commit.sha + '/statuses'\n        : 'https://grenade-cors-proxy.herokuapp.com/https://api.github.com/repos/mozilla-platform-ops/cloud-image-builder/commits/' + this.props.commit.sha + '/statuses'\n    )\n    .then(responseGithubApiStatuses => responseGithubApiStatuses.json())\n    .then((githubCommitStatuses) => {\n      if (githubCommitStatuses.length) {\n        this.setState(state => ({\n          contexts: [...new Set(githubCommitStatuses.map(s => s.context))].sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase())),\n          statuses: githubCommitStatuses//.filter(s => s.state !== 'pending')\n        }));\n      }\n    })\n    .catch(console.log);\n  }\n\n  render() {\n    return (\n      <Card style={{ width: '100%', marginTop: '10px' }}>\n        <Card.Header>\n          <Accordion.Toggle as={Button} variant=\"link\" eventKey={this.props.commit.sha} onClick={() => {\n            this.setState(state => ({expanded: !state.expanded}))\n          }}>\n            {(this.state.expanded) ? <CaretDown /> : <CaretRight />}\n          </Accordion.Toggle>\n          {\n            new Intl.DateTimeFormat('en-GB', {\n              year: 'numeric',\n              month: 'short',\n              day: '2-digit',\n              hour: 'numeric',\n              minute: 'numeric',\n              timeZoneName: 'short'\n            }).format(new Date(this.props.commit.committer.date))\n          }\n          &nbsp;\n          <a href={this.props.commit.url}>\n            { this.props.commit.sha.substring(0, 7) }\n          </a>\n          {\n            Object.keys(this.state.summary).filter(k => this.state.summary[k] > 0).map(k => (\n              <Badge\n                style={{ marginLeft: '0.3em' }}\n                variant={StatusBadgeVariantMap[k]}>\n                {this.state.summary[k]}\n              </Badge>\n            ))\n          }\n          <Image\n            src={this.props.commit.author.avatar}\n            alt={this.props.commit.author.name}\n            title={this.props.commit.author.name}\n            rounded={true}\n            style={{ width: '30px', height: '30px', marginLeft: '10px' }}\n            className=\"float-right\" />\n          <span className=\"float-right\">\n            { this.props.commit.author.username }\n          </span>\n        </Card.Header>\n        <Accordion.Collapse eventKey={this.props.commit.sha}>\n          <Card.Body>\n            <CommitMessage message={this.props.commit.message} />\n            <Statuses contexts={this.state.contexts} statuses={this.state.statuses} appender={this.appendToSummary} />\n          </Card.Body>\n        </Accordion.Collapse>\n      </Card>\n    );\n  }\n}\n\nexport default Commit;\n","import React from 'react'\nimport Commit from './Commit';\nimport Accordion from 'react-bootstrap/Accordion';\n\nclass Commits extends React.Component {\n  /*\n  constructor(props) {\n    super(props);\n    this.state = {\n      defaultActiveKey: props.latest\n    };\n  }\n  componentDidMount() {\n    this.setState(state => ({ defaultActiveKey: (this.props.commits && this.props.commits.length) ? this.props.commits[0].sha : null }));\n  }\n  */\n  render() {\n    return (\n      <Accordion defaultActiveKey={null/*this.props.latest*/}>\n        {\n          this.props.commits.map(commit => (\n            <Commit commit={commit} key={commit.sha} expand={false/*(commit.sha === this.props.latest)*/} />\n          ))\n        }\n      </Accordion>\n    );\n  }\n}\n\nexport default Commits;\n","import React from 'react'\nimport Commits from './Commits';\nimport Container from 'react-bootstrap/Container';\n\nclass App extends React.Component {\n  state = {\n    commits: []\n  };\n  /*\n  note: to run locally, a cors proxy is required.\n\n  to install a local cors proxy:\n  $ sudo npm install -g local-cors-proxy\n\n  to run a local cors proxy with authenticated github requests:\n  $ lcp --proxyUrl https://grenade:$(pass github/grenade/token/cloud-image-builder)@api.github.com\n  */\n\n  componentDidMount() {\n    fetch(\n      (window.location.hostname === 'localhost')\n        ? 'http://localhost:8010/proxy/repos/mozilla-platform-ops/cloud-image-builder/commits'\n        : 'https://grenade-cors-proxy.herokuapp.com/https://api.github.com/repos/mozilla-platform-ops/cloud-image-builder/commits'\n    )\n    .then(responseGithubApiCommits => responseGithubApiCommits.json())\n    .then((githubCommits) => {\n      if (githubCommits.length) {\n        this.setState(state => ({\n          commits: githubCommits.map(c => ({\n            sha: c.sha,\n            url: c.html_url,\n            author: {...c.commit.author, ...{ id: c.author.id, username: c.author.login, avatar: c.author.avatar_url }},\n            committer: {...c.commit.committer, ...{ id: c.committer.id, username: c.committer.login, avatar: c.committer.avatar_url }},\n            message: c.commit.message.split('\\n').filter(line => line !== ''),\n            verification: c.commit.verification\n          })),\n          latest: githubCommits[0].sha\n        }));\n      } else {\n        console.log(githubCommits)\n      }\n    })\n    .catch(console.log);\n  }\n\n  render() {\n    return (\n      <Container>\n        <Commits commits={this.state.commits} latest={this.state.latest} />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}