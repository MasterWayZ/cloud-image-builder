{"version":3,"sources":["Run.js","Runs.js","Task.js","Tasks.js","Status.js","Statuses.js","Commit.js","Commits.js","App.js","serviceWorker.js","index.js"],"names":["Run","state","artifacts","images","fetch","this","props","rootUrl","taskId","run","runId","then","responseArtifactsApi","json","container","length","setState","some","a","name","startsWith","endsWith","artifact","find","responseArtifactApi","launchConfigs","map","launchConfig","storageProfile","imageReference","id","console","log","catch","style","color","href","image","key","substring","lastIndexOf","React","Component","Runs","runs","Task","task","status","metadata","title","Tasks","tasks","Status","showAllTasks","taskGroupId","taskCount","builds","travisApiResponse","travisBuildResults","badgeVariants","completed","failed","exception","running","pending","unscheduled","context","pathname","URL","target_url","buildId","responseBuildsApi","matrix","taskGroupHtmlUrl","tasksApi","hostname","responseTasksApi","Intl","DateTimeFormat","year","month","day","hour","minute","timeZoneName","format","Date","updated_at","description","toLowerCase","Object","keys","filter","t","Badge","margin","variant","result","b","Statuses","contexts","cI","statuses","s","Commit","window","location","commit","sha","responseGithubApiStatuses","githubCommitStatuses","Set","sort","localeCompare","marginTop","Row","Card","width","Header","committer","date","url","Image","src","author","avatar","alt","rounded","height","marginLeft","className","username","Body","message","join","Commits","listStyle","paddingLeft","commits","App","responseGithubApiCommits","githubCommits","c","html_url","login","avatar_url","split","line","verification","Container","Boolean","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.044f90b2.chunk.js","sourcesContent":["import React from 'react'\n\nclass Run extends React.Component {\n  state = {\n    artifacts: [],\n    images: []\n  };\n\n  componentDidMount() {\n    fetch(this.props.rootUrl + '/api/queue/v1/task/' + this.props.taskId + '/runs/' + this.props.run.runId + '/artifacts')\n    .then(responseArtifactsApi => responseArtifactsApi.json())\n    .then((container) => {\n      if (container.artifacts && container.artifacts.length) {\n        this.setState(state => ({\n          artifacts: container.artifacts\n        }));\n        if (container.artifacts.some(a => a.name.startsWith('public/') && a.name.endsWith('.json'))) {\n          let artifact = container.artifacts.find(a => a.name.startsWith('public/') && a.name.endsWith('.json'))\n          fetch(this.props.rootUrl + '/api/queue/v1/task/' + this.props.taskId + '/runs/' + this.props.run.runId + '/artifacts/' + artifact.name)\n          .then(responseArtifactApi => responseArtifactApi.json())\n          .then((container) => {\n            if (container.launchConfigs && container.launchConfigs.length) {\n              this.setState(state => ({\n                images: container.launchConfigs.map(launchConfig => launchConfig.storageProfile.imageReference.id)\n              }));\n            } else {\n              console.log(container);\n            }\n          })\n          .catch(console.log);\n        }\n      } else {\n        console.log(container);\n      }\n    })\n    .catch(console.log);\n  }\n\n  render() {\n    return (\n      <li style={{\n        color: (this.props.run.state === 'completed')\n          ? 'green'\n          : (this.props.run.state === 'failed')\n            ? 'red'\n            : (this.props.run.state === 'exception')\n              ? 'orange'\n              : (this.props.run.state === 'pending')\n                ? 'darkorchid'\n                : (this.props.run.state === 'running')\n                  ? 'steelblue'\n                  : (this.props.run.state === 'unscheduled')\n                    ? 'gray'\n                    : 'black' }}>\n        <a href={this.props.rootUrl + '/tasks/' + this.props.taskId}>\n         run {this.props.run.runId}\n        </a> {this.props.run.state}\n          {\n            (this.props.run.state === 'completed')\n              ? (\n                <ul style={{ color: 'black' }}>\n                  {\n                    this.state.images.map(image => (\n                      <li key={image}>\n                        {image.substring(image.lastIndexOf('/') + 1)}\n                      </li>\n                    ))\n                  }\n                </ul>\n              )\n              : ''\n          }\n      </li>\n    );\n  }\n}\n\nexport default Run;\n","import React from 'react'\nimport Run from './Run';\n\nclass Runs extends React.Component {\n  render() {\n    return (\n      <ul>\n        {\n          this.props.runs.map(run => (\n            <Run run={run} key={run.runId} taskId={this.props.taskId} rootUrl={this.props.rootUrl} />\n          ))\n        }\n      </ul>\n    );\n  }\n}\n\nexport default Runs;\n","import React from 'react'\nimport Runs from './Runs';\n\nclass Task extends React.Component {\n  render() {\n    return (\n      <li style={{\n        color: (this.props.task.status.state === 'completed')\n          ? 'green'\n          : (this.props.task.status.state === 'failed')\n            ? 'red'\n            : (this.props.task.status.state === 'exception')\n              ? 'orange'\n              : (this.props.task.status.state === 'pending')\n                ? 'darkorchid'\n                : (this.props.task.status.state === 'running')\n                  ? 'steelblue'\n                  : (this.props.task.status.state === 'unscheduled')\n                    ? 'gray'\n                    : 'black' }}>\n        {this.props.task.task.metadata.name}\n        &nbsp;\n        <a href={this.props.rootUrl + '/tasks/' + this.props.task.status.taskId} title={this.props.task.status.taskId}>\n          {this.props.task.status.taskId.substring(0, 7)}...\n        </a>\n        <Runs runs={this.props.task.status.runs} taskId={this.props.task.status.taskId} rootUrl={this.props.rootUrl} />\n      </li>\n    );\n  }\n}\n\nexport default Task;\n","import React from 'react'\nimport Task from './Task';\n\nclass Tasks extends React.Component {\n  render() {\n    return (\n      <ul>\n        {\n          this.props.tasks.map(task => (\n            <Task task={task} key={task.status.taskId} rootUrl={this.props.rootUrl} />\n          ))\n        }\n      </ul>\n    );\n  }\n}\n\nexport default Tasks;\n","import React from 'react'\nimport Task from './Task';\nimport Tasks from './Tasks';\nimport Badge from 'react-bootstrap/Badge';\n\nclass Status extends React.Component {\n  state = {\n    showAllTasks: false,\n    taskGroupId: null,\n    taskCount: 0,\n    tasks: [],\n    builds: [],\n    travisApiResponse: {}\n  };\n  travisBuildResults = [\n    'completed',\n    'failed',\n  ];\n  badgeVariants = {\n    completed: 'success',\n    failed: 'danger',\n    exception: 'warning',\n    running: 'primary',\n    pending: 'info',\n    unscheduled: 'secondary'\n  }\n\n  componentDidMount() {\n    switch (this.props.status.context) {\n      case 'continuous-integration/travis-ci/push':\n        let pathname = (new URL(this.props.status.target_url)).pathname;\n        let buildId = pathname.substring(pathname.lastIndexOf('/') + 1);\n        this.setState(state => ({\n          taskGroupId: buildId\n        }));\n        let buildsApi = 'https://api.travis-ci.org/repos/mozilla-platform-ops/cloud-image-builder/builds/' + buildId;\n        fetch(buildsApi)\n        .then(responseBuildsApi => responseBuildsApi.json())\n        .then((container) => {\n          if (container.matrix) {\n            this.setState(state => ({\n              taskCount: container.matrix.length,\n              builds: container.matrix,\n              travisApiResponse: container\n            }));\n          }\n        })\n        .catch(console.log);\n        break;\n      default:\n        let taskGroupHtmlUrl = new URL(this.props.status.target_url);\n        let taskGroupId = this.props.status.target_url.substring(this.props.status.target_url.lastIndexOf('/') + 1);\n        this.setState(state => ({\n          taskGroupId: taskGroupId\n        }));\n        let tasksApi = 'https://' + taskGroupHtmlUrl.hostname + '/api/queue/v1/task-group/' + taskGroupId + '/list';\n        fetch(tasksApi)\n        .then(responseTasksApi => responseTasksApi.json())\n        .then((container) => {\n          if (container.tasks && container.tasks.length) {\n            this.setState(state => ({\n              taskCount: container.tasks.length,\n              tasks: container.tasks//.sort((a, b) => a.task.metadata.name.localeCompare(b.task.metadata.name))\n            }));\n          }\n        })\n        .catch(console.log);\n        break;\n    }\n  }\n\n  render() {\n    return (\n      <li style={{\n        color: (this.props.status.state === 'success')\n          ? 'green'\n          : (this.props.status.state === 'failure')\n            ? 'red'\n            : 'gray'\n      }}>\n        {\n          new Intl.DateTimeFormat('en-GB', {\n            year: 'numeric',\n            month: 'short',\n            day: '2-digit',\n            hour: 'numeric',\n            minute: 'numeric',\n            timeZoneName: 'short'\n          }).format(new Date(this.props.status.updated_at))\n        }\n        &nbsp;\n        {this.props.status.description.toLowerCase()}\n        &nbsp;\n        ({this.state.taskCount} tasks in group <a href={this.props.status.target_url} title={this.state.taskGroupId}>{this.state.taskGroupId && this.state.taskGroupId.substring(0, 7)}...</a>\n        &nbsp;\n        {\n          Object.keys(this.badgeVariants).map(status => (\n            (this.state.tasks.filter(t => t.status.state === status).length)\n              ? (\n                  <Badge style={{ margin: '0 1px' }} variant={this.badgeVariants[status]} title={status + ': ' + this.state.tasks.filter(t => t.status.state === status).length}>\n                    {this.state.tasks.filter(t => t.status.state === status).length}\n                  </Badge>\n                )\n              : ''\n          ))\n        }\n        {\n          [0, 1].map(result => (\n            (this.state.builds.filter(b => b.result === result).length)\n              ? (\n                  <Badge style={{ margin: '0 1px' }} variant={this.badgeVariants[this.travisBuildResults[result]]} title={this.travisBuildResults[result] + ': ' + this.state.builds.filter(b => b.result === result).length}>\n                    {this.state.builds.filter(b => b.result === result).length}\n                  </Badge>\n                )\n              : ''\n          ))\n        }\n        )\n        {\n          (this.state.showAllTasks)\n            ? <Tasks tasks={this.state.tasks} rootUrl={'https://' + (new URL(this.props.status.target_url)).hostname} />\n            : (\n                <ul>\n                  {\n                    (this.state.tasks.filter(t => t.task.metadata.name.startsWith('04 :: generate') && t.status.state === 'completed').map(task => (\n                      <Task task={task} rootUrl={'https://' + (new URL(this.props.status.target_url)).hostname} />\n                    )))\n                  }\n                </ul>\n              )\n        }\n      </li>\n    );\n  }\n}\n\nexport default Status;\n","import React from 'react'\nimport Status from './Status';\n\nclass Statuses extends React.Component {\n  render() {\n    return (\n      <ul>\n        {\n          this.props.contexts.map((context, cI) => (\n            <li key={cI}>\n              { context }\n              <ul>\n              {\n                // only show pending statuses if there are no others (eg: failed/completed)\n                (this.props.statuses.some(s => s.context === context && s.state !== 'pending'))\n                  ? this.props.statuses.filter(s => s.context === context && s.state !== 'pending').map((status) => (\n                    <Status status={status} key={status.id} />\n                  ))\n                  : this.props.statuses.filter(s => s.context === context).map((status) => (\n                    <Status status={status} key={status.id} />\n                  ))\n              }\n              </ul>\n            </li>\n          ))\n        }\n      </ul>\n    );\n  }\n}\n\nexport default Statuses;\n","import React from 'react'\nimport Card from 'react-bootstrap/Card';\nimport Row from 'react-bootstrap/Row';\nimport Image from 'react-bootstrap/Image';\nimport Statuses from './Statuses';\n\nclass Commit extends React.Component {\n  state = {\n    contexts: [],\n    statuses: []\n  };\n  /*\n  note: to run locally, a cors proxy is required.\n\n  to install a local cors proxy:\n  $ sudo npm install -g local-cors-proxy\n\n  to run a local cors proxy with authenticated github requests:\n  $ lcp --proxyUrl https://grenade:$(pass github/grenade/token/cloud-image-builder)@api.github.com\n  */\n\n  componentDidMount() {\n    fetch(\n      (window.location.hostname === 'localhost')\n        ? 'http://localhost:8010/proxy/repos/mozilla-platform-ops/cloud-image-builder/commits/' + this.props.commit.sha + '/statuses'\n        : 'https://grenade-cors-proxy.herokuapp.com/https://api.github.com/repos/mozilla-platform-ops/cloud-image-builder/commits/' + this.props.commit.sha + '/statuses'\n    )\n    .then(responseGithubApiStatuses => responseGithubApiStatuses.json())\n    .then((githubCommitStatuses) => {\n      if (githubCommitStatuses.length) {\n        this.setState(state => ({\n          contexts: [...new Set(githubCommitStatuses.map(s => s.context))].sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase())),\n          statuses: githubCommitStatuses//.filter(s => s.state !== 'pending')\n        }));\n      }\n    })\n    .catch(console.log);\n  }\n\n  render() {\n    return (\n      <li style={{ marginTop: '10px' }}>\n        <Row>\n          <Card style={{ width: '100%' }}>\n            <Card.Header>\n              {\n                new Intl.DateTimeFormat('en-GB', {\n                  year: 'numeric',\n                  month: 'short',\n                  day: '2-digit',\n                  hour: 'numeric',\n                  minute: 'numeric',\n                  timeZoneName: 'short'\n                }).format(new Date(this.props.commit.committer.date))\n              }\n              &nbsp;\n              <a href={this.props.commit.url}>\n                { this.props.commit.sha.substring(0, 7) }\n              </a>\n              <Image\n                src={this.props.commit.author.avatar}\n                alt={this.props.commit.author.name}\n                title={this.props.commit.author.name}\n                rounded={true}\n                style={{ width: '30px', height: '30px', marginLeft: '10px' }}\n                className=\"float-right\" />\n              <span className=\"float-right\">\n                { this.props.commit.author.username }\n              </span>\n            </Card.Header>\n            <Card.Body>\n              <pre>\n                { this.props.commit.message.join('\\n') }\n              </pre>\n              <Statuses contexts={this.state.contexts} statuses={this.state.statuses} />\n            </Card.Body>\n          </Card>\n        </Row>\n      </li>\n    );\n  }\n}\n\nexport default Commit;\n","import React from 'react'\nimport Commit from './Commit';\n\nclass Commits extends React.Component {\n  render() {\n    return (\n      <ul style={{\n        listStyle: 'none',\n        marginLeft: '0',\n        paddingLeft: '0'\n      }}>\n        {\n          this.props.commits.map(commit => (\n            <Commit commit={commit} key={commit.sha} />\n          ))\n        }\n      </ul>\n    );\n  }\n}\n\nexport default Commits;\n","import React from 'react'\nimport Commits from './Commits';\nimport Container from 'react-bootstrap/Container';\n\nclass App extends React.Component {\n  state = {\n    commits: []\n  };\n  /*\n  note: to run locally, a cors proxy is required.\n\n  to install a local cors proxy:\n  $ sudo npm install -g local-cors-proxy\n\n  to run a local cors proxy with authenticated github requests:\n  $ lcp --proxyUrl https://grenade:$(pass github/grenade/token/cloud-image-builder)@api.github.com\n  */\n\n  componentDidMount() {\n    fetch(\n      (window.location.hostname === 'localhost')\n        ? 'http://localhost:8010/proxy/repos/mozilla-platform-ops/cloud-image-builder/commits'\n        : 'https://grenade-cors-proxy.herokuapp.com/https://api.github.com/repos/mozilla-platform-ops/cloud-image-builder/commits'\n    )\n    .then(responseGithubApiCommits => responseGithubApiCommits.json())\n    .then((githubCommits) => {\n      if (githubCommits.length) {\n        this.setState(state => ({\n          commits: githubCommits.map(c => ({\n            sha: c.sha,\n            url: c.html_url,\n            author: {...c.commit.author, ...{ id: c.author.id, username: c.author.login, avatar: c.author.avatar_url }},\n            committer: {...c.commit.committer, ...{ id: c.committer.id, username: c.committer.login, avatar: c.committer.avatar_url }},\n            message: c.commit.message.split('\\n').filter(line => line !== ''),\n            verification: c.commit.verification\n          }))\n        }));\n      } else {\n        console.log(githubCommits)\n      }\n    })\n    .catch(console.log);\n  }\n\n  render() {\n    return (\n      <Container>\n        <Commits commits={this.state.commits} />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}