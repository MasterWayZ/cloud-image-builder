{"version":3,"sources":["Run.js","Runs.js","Task.js","Tasks.js","Status.js","Statuses.js","Commit.js","Commits.js","App.js","serviceWorker.js","index.js"],"names":["Run","style","color","this","props","run","state","runId","React","Component","Runs","runs","map","key","Task","task","status","metadata","name","Tasks","tasks","taskId","Status","showAllTasks","taskGroupId","taskCount","tasksApi","context","taskGroupHtmlUrl","URL","target_url","substring","lastIndexOf","setState","hostname","fetch","then","responseTasksApi","json","container","length","catch","console","log","Intl","DateTimeFormat","year","month","day","hour","minute","timeZoneName","format","Date","updated_at","description","toLowerCase","href","filter","t","some","startsWith","find","Statuses","contexts","cI","statuses","s","id","Commit","apiBase","window","location","commit","sha","responseGithubApiStatuses","githubCommitStatuses","Set","sort","a","b","localeCompare","marginTop","Row","Card","width","Header","url","committer","date","Image","src","author","avatar","alt","title","rounded","height","marginLeft","className","username","Body","message","join","Commits","listStyle","paddingLeft","commits","App","limit","responseGithubApiCommits","githubCommits","c","html_url","login","avatar_url","split","line","verification","slice","Container","Boolean","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"mUAoBeA,E,uKAhBX,OACE,wBAAIC,MAAO,CACTC,MAAiC,cAAzBC,KAAKC,MAAMC,IAAIC,MACnB,QAC0B,WAAzBH,KAAKC,MAAMC,IAAIC,MACd,MAC0B,cAAzBH,KAAKC,MAAMC,IAAIC,MACd,SACA,UAEPH,KAAKC,MAAMC,IAAIE,MATlB,IAS0BJ,KAAKC,MAAMC,IAAIC,W,GAZ7BE,IAAMC,WCeTC,E,uKAZX,OACE,4BAEIP,KAAKC,MAAMO,KAAKC,KAAI,SAAAP,GAAG,OACrB,kBAAC,EAAD,CAAKA,IAAKA,EAAKQ,IAAKR,EAAIE,gB,GANjBC,IAAMC,WCiBVK,E,uKAfX,OACE,wBAAIb,MAAO,CACTC,MAAyC,cAAjCC,KAAKC,MAAMW,KAAKC,OAAOV,MAC3B,QACkC,WAAjCH,KAAKC,MAAMW,KAAKC,OAAOV,MACtB,MACA,UAELH,KAAKC,MAAMW,KAAKA,KAAKE,SAASC,KAC/B,kBAAC,EAAD,CAAMP,KAAMR,KAAKC,MAAMW,KAAKC,OAAOL,Y,GAXxBH,IAAMC,WCcVU,E,uKAZX,OACE,4BAEIhB,KAAKC,MAAMgB,MAAMR,KAAI,SAAAG,GAAI,OACvB,kBAAC,EAAD,CAAMA,KAAMA,EAAMF,IAAKE,EAAKC,OAAOK,iB,GAN3Bb,IAAMC,WC+GXa,E,4MA7GbhB,MAAQ,CACNiB,cAAc,EACdC,YAAa,KACbC,UAAW,EACXL,MAAO,I,kEAGY,IAAD,OACdM,GAAW,EACf,OAAQvB,KAAKC,MAAMY,OAAOW,SACxB,IAAK,wCACHD,GAAW,EACX,MACF,QACE,IAAIE,EAAmB,IAAIC,IAAI1B,KAAKC,MAAMY,OAAOc,YAC7CN,EAAcrB,KAAKC,MAAMY,OAAOc,WAAWC,UAAU5B,KAAKC,MAAMY,OAAOc,WAAWE,YAAY,KAAO,GACzG7B,KAAK8B,UAAS,SAAA3B,GAAK,MAAK,CACtBkB,YAAaA,MAEfE,EAAW,WAAaE,EAAiBM,SAAW,4BAA8BV,EAAc,QAChGW,MAAMT,GACLU,MAAK,SAAAC,GAAgB,OAAIA,EAAiBC,UAC1CF,MAAK,SAACG,GACDA,EAAUnB,OAASmB,EAAUnB,MAAMoB,QACrC,EAAKP,UAAS,SAAA3B,GAAK,MAAK,CACtBmB,UAAWc,EAAUnB,MAAMoB,OAC3BpB,MAAOmB,EAAUnB,aAItBqB,MAAMC,QAAQC,KAGfjB,GACFS,MAAMT,GACLU,MAAK,SAAAC,GAAgB,OAAIA,EAAiBC,UAC1CF,MAAK,SAACG,GACDA,EAAUnB,OAASmB,EAAUnB,MAAMoB,OACrC,EAAKP,UAAS,SAAA3B,GAAK,MAAK,CACtBc,MAAOmB,EAAUnB,WAGnBsB,QAAQC,IAAI,mBAAqBjB,GACjCgB,QAAQC,IAAIJ,OAGfE,MAAMC,QAAQC,O,+BAIT,IAAD,OACP,OACE,wBAAI1C,MAAO,CACTC,MAAoC,YAA5BC,KAAKC,MAAMY,OAAOV,MACtB,QAC6B,YAA5BH,KAAKC,MAAMY,OAAOV,MACjB,MACA,UAGJ,IAAIsC,KAAKC,eAAe,QAAS,CAC/BC,KAAM,UACNC,MAAO,QACPC,IAAK,UACLC,KAAM,UACNC,OAAQ,UACRC,aAAc,UACbC,OAAO,IAAIC,KAAKlD,KAAKC,MAAMY,OAAOsC,aAfzC,OAkBGnD,KAAKC,MAAMY,OAAOuC,YAAYC,cAlBjC,SAoBIrD,KAAKG,MAAMmB,UApBf,mBAoByC,uBAAGgC,KAAMtD,KAAKC,MAAMY,OAAOc,YAAa3B,KAAKG,MAAMkB,aApB5F,SAuBI,CAAC,YAAa,SAAU,aAAaZ,KAAI,SAAAI,GAAM,OAC5C,EAAKV,MAAMc,MAAMsC,QAAO,SAAAC,GAAC,OAAIA,EAAE3C,OAAOV,QAAUU,KAAQwB,OAErD,0BAAMvC,MAAO,CACXC,MAAmB,cAAXc,EACJ,QACY,WAAXA,EACC,MACY,cAAXA,EACC,SACA,UAPV,OAQSA,EART,KAQmB,EAAKV,MAAMc,MAAMsC,QAAO,SAAAC,GAAC,OAAIA,EAAE3C,OAAOV,QAAUU,KAAQwB,OAR3E,QAWA,MArCV,MA0CKrC,KAAKG,MAAMiB,aACR,kBAAC,EAAD,CAAOH,MAAOjB,KAAKG,MAAMc,QACxBjB,KAAKG,MAAMc,MAAMwC,MAAK,SAAAD,GAAC,OAAIA,EAAE5C,KAAKE,SAASC,KAAK2C,WAAW,qBAE1D,4BACE,kBAAC,EAAD,CAAM9C,KAAMZ,KAAKG,MAAMc,MAAM0C,MAAK,SAAAH,GAAC,OAAIA,EAAE5C,KAAKE,SAASC,KAAK2C,WAAW,wBAGzE,Q,GAvGKrD,IAAMC,WCsBZsD,E,uKAtBH,IAAD,OACP,OACE,4BAEI5D,KAAKC,MAAM4D,SAASpD,KAAI,SAACe,EAASsC,GAAV,OACtB,wBAAIpD,IAAKoD,GACLtC,EACF,4BAEE,EAAKvB,MAAM8D,SAASR,QAAO,SAAAS,GAAC,OAAIA,EAAExC,UAAYA,KAASf,KAAI,SAACI,GAAD,OACzD,kBAAC,EAAD,CAAQA,OAAQA,EAAQH,IAAKG,EAAOoD,kB,GAX/B5D,IAAMC,WCiFd4D,E,4MA7Eb/D,MAAQ,CACN0D,SAAU,GACVE,SAAU,I,EAWZI,QAAwC,cAA7BC,OAAOC,SAAStC,SACvB,8BACA,yB,kEAEiB,IAAD,OAClBC,MACEhC,KAAKmE,QAAU,2DAA6DnE,KAAKC,MAAMqE,OAAOC,IAAM,aAErGtC,MAAK,SAAAuC,GAAyB,OAAIA,EAA0BrC,UAC5DF,MAAK,SAACwC,GACDA,EAAqBpC,QACvB,EAAKP,UAAS,SAAA3B,GAAK,MAAK,CACtB0D,SAAU,YAAI,IAAIa,IAAID,EAAqBhE,KAAI,SAAAuD,GAAC,OAAIA,EAAExC,aAAWmD,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEvB,cAAcyB,cAAcD,EAAExB,kBAChHU,SAAUU,EAAqBlB,QAAO,SAAAS,GAAC,MAAgB,YAAZA,EAAE7D,gBAIlDmC,MAAMC,QAAQC,O,+BAIf,OACE,wBAAI1C,MAAO,CAAEiF,UAAW,SACtB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMnF,MAAO,CAAEoF,MAAO,SACpB,kBAACD,EAAA,EAAKE,OAAN,KACE,uBAAG7B,KAAMtD,KAAKC,MAAMqE,OAAOc,KACvBpF,KAAKC,MAAMqE,OAAOC,IAAI3C,UAAU,EAAG,IAFzC,OAMI,IAAIa,KAAKC,eAAe,QAAS,CAC/BC,KAAM,UACNC,MAAO,QACPC,IAAK,UACLC,KAAM,UACNC,OAAQ,UACRC,aAAc,UACbC,OAAO,IAAIC,KAAKlD,KAAKC,MAAMqE,OAAOe,UAAUC,OAEjD,kBAACC,EAAA,EAAD,CACEC,IAAKxF,KAAKC,MAAMqE,OAAOmB,OAAOC,OAC9BC,IAAK3F,KAAKC,MAAMqE,OAAOmB,OAAO1E,KAC9B6E,MAAO5F,KAAKC,MAAMqE,OAAOmB,OAAO1E,KAChC8E,SAAS,EACT/F,MAAO,CAAEoF,MAAO,OAAQY,OAAQ,OAAQC,WAAY,QACpDC,UAAU,gBACZ,0BAAMA,UAAU,eACZhG,KAAKC,MAAMqE,OAAOmB,OAAOQ,WAG/B,kBAAChB,EAAA,EAAKiB,KAAN,KACE,6BACIlG,KAAKC,MAAMqE,OAAO6B,QAAQC,KAAK,OAEnC,kBAAC,EAAD,CAAUvC,SAAU7D,KAAKG,MAAM0D,SAAUE,SAAU/D,KAAKG,MAAM4D,mB,GArEvD1D,IAAMC,WCeZ+F,E,uKAhBX,OACE,wBAAIvG,MAAO,CACTwG,UAAW,OACXP,WAAY,IACZQ,YAAa,MAGXvG,KAAKC,MAAMuG,QAAQ/F,KAAI,SAAA6D,GAAM,OAC3B,kBAAC,EAAD,CAAQA,OAAQA,EAAQ5D,IAAK4D,EAAOC,c,GAV1BlE,IAAMC,W,QCsDbmG,E,4MApDbtG,MAAQ,CACNqG,QAAS,GAETE,MAAqC,cAA7BtC,OAAOC,SAAStC,SAA4B,GAAK,G,EAW3DoC,QAAwC,cAA7BC,OAAOC,SAAStC,SACvB,8BACA,yB,kEAEiB,IAAD,OAClBC,MACEhC,KAAKmE,QAAU,2DAEhBlC,MAAK,SAAA0E,GAAwB,OAAIA,EAAyBxE,UAC1DF,MAAK,SAAC2E,GACDA,EAAcvE,OAChB,EAAKP,UAAS,SAAA3B,GAAK,MAAK,CACtBqG,QAASI,EAAcnG,KAAI,SAAAoG,GAAC,MAAK,CAC/BtC,IAAKsC,EAAEtC,IACPa,IAAKyB,EAAEC,SACPrB,OAAO,2BAAKoB,EAAEvC,OAAOmB,QAAW,CAAExB,GAAI4C,EAAEpB,OAAOxB,GAAIgC,SAAUY,EAAEpB,OAAOsB,MAAOrB,OAAQmB,EAAEpB,OAAOuB,aAC9F3B,UAAU,2BAAKwB,EAAEvC,OAAOe,WAAc,CAAEpB,GAAI4C,EAAExB,UAAUpB,GAAIgC,SAAUY,EAAExB,UAAU0B,MAAOrB,OAAQmB,EAAExB,UAAU2B,aAC7Gb,QAASU,EAAEvC,OAAO6B,QAAQc,MAAM,MAAM1D,QAAO,SAAA2D,GAAI,MAAa,KAATA,KACrDC,aAAcN,EAAEvC,OAAO6C,iBACrBC,MAAM,EAAI,EAAKjH,MAAMuG,MAAQ,OAGnCnE,QAAQC,IAAIoE,MAGftE,MAAMC,QAAQC,O,+BAIf,OACE,kBAAC6E,EAAA,EAAD,KAEE,kBAAC,EAAD,CAASb,QAASxG,KAAKG,MAAMqG,e,GA/CnBnG,IAAMC,WCQJgH,QACW,cAA7BlD,OAAOC,SAAStC,UAEe,UAA7BqC,OAAOC,SAAStC,UAEhBqC,OAAOC,SAAStC,SAASwF,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9F,MAAK,SAAA+F,GACJA,EAAaC,gBAEd3F,OAAM,SAAA4F,GACL3F,QAAQ2F,MAAMA,EAAM/B,c","file":"static/js/main.64bda8be.chunk.js","sourcesContent":["import React from 'react'\n\nclass Run extends React.Component {\n  render() {\n    return (\n      <li style={{\n        color: (this.props.run.state === 'completed')\n          ? 'green'\n          : (this.props.run.state === 'failed')\n            ? 'red'\n            : (this.props.run.state === 'exception')\n              ? 'orange'\n              : 'black'\n      }}>\n        {this.props.run.runId} {this.props.run.state}\n      </li>\n    );\n  }\n}\n\nexport default Run;\n","import React from 'react'\nimport Run from './Run';\n\nclass Runs extends React.Component {\n  render() {\n    return (\n      <ul>\n        {\n          this.props.runs.map(run => (\n            <Run run={run} key={run.runId} />\n          ))\n        }\n      </ul>\n    );\n  }\n}\n\nexport default Runs;\n","import React from 'react'\nimport Runs from './Runs';\n\nclass Task extends React.Component {\n  render() {\n    return (\n      <li style={{\n        color: (this.props.task.status.state === 'completed')\n          ? 'green'\n          : (this.props.task.status.state === 'failed')\n            ? 'red'\n            : 'black'\n      }}>\n        {this.props.task.task.metadata.name}\n        <Runs runs={this.props.task.status.runs} />\n      </li>\n    );\n  }\n}\n\nexport default Task;\n","import React from 'react'\nimport Task from './Task';\n\nclass Tasks extends React.Component {\n  render() {\n    return (\n      <ul>\n        {\n          this.props.tasks.map(task => (\n            <Task task={task} key={task.status.taskId} />\n          ))\n        }\n      </ul>\n    );\n  }\n}\n\nexport default Tasks;\n","import React from 'react'\nimport Task from './Task';\nimport Tasks from './Tasks';\n\nclass Status extends React.Component {\n  state = {\n    showAllTasks: false,\n    taskGroupId: null,\n    taskCount: 0,\n    tasks: []\n  };\n\n  componentDidMount() {\n    let tasksApi = false;\n    switch (this.props.status.context) {\n      case 'continuous-integration/travis-ci/push':\n        tasksApi = false;\n        break;\n      default:\n        let taskGroupHtmlUrl = new URL(this.props.status.target_url);\n        let taskGroupId = this.props.status.target_url.substring(this.props.status.target_url.lastIndexOf('/') + 1);\n        this.setState(state => ({\n          taskGroupId: taskGroupId\n        }));\n        tasksApi = 'https://' + taskGroupHtmlUrl.hostname + '/api/queue/v1/task-group/' + taskGroupId + '/list';\n        fetch(tasksApi)\n        .then(responseTasksApi => responseTasksApi.json())\n        .then((container) => {\n          if (container.tasks && container.tasks.length) {\n            this.setState(state => ({\n              taskCount: container.tasks.length,\n              tasks: container.tasks//.sort((a, b) => a.task.metadata.name.localeCompare(b.task.metadata.name))\n            }));\n          }\n        })\n        .catch(console.log);\n        break;\n    }\n    if (tasksApi) {\n      fetch(tasksApi)\n      .then(responseTasksApi => responseTasksApi.json())\n      .then((container) => {\n        if (container.tasks && container.tasks.length) {\n          this.setState(state => ({\n            tasks: container.tasks\n          }));\n        } else {\n          console.log('error fetching: ' + tasksApi);\n          console.log(container);\n        }\n      })\n      .catch(console.log);\n    }\n  }\n\n  render() {\n    return (\n      <li style={{\n        color: (this.props.status.state === 'success')\n          ? 'green'\n          : (this.props.status.state === 'failure')\n            ? 'red'\n            : 'black'\n      }}>\n        {\n          new Intl.DateTimeFormat('en-GB', {\n            year: 'numeric',\n            month: 'short',\n            day: '2-digit',\n            hour: 'numeric',\n            minute: 'numeric',\n            timeZoneName: 'short'\n          }).format(new Date(this.props.status.updated_at))\n        }\n        &nbsp;\n        {this.props.status.description.toLowerCase()}\n        &nbsp;\n        ({this.state.taskCount} tasks in group <a href={this.props.status.target_url}>{this.state.taskGroupId}</a>\n        &nbsp;\n        [{\n          ['completed', 'failed', 'exception'].map(status => (\n            (this.state.tasks.filter(t => t.status.state === status).length)\n              ? (\n                <span style={{\n                  color: (status === 'completed')\n                    ? 'green'\n                    : (status === 'failed')\n                      ? 'red'\n                      : (status === 'exception')\n                        ? 'orange'\n                        : 'black' }}>\n                  &nbsp;{status}: {this.state.tasks.filter(t => t.status.state === status).length}&nbsp;\n                </span>\n              )\n              : ''\n          ))\n        }]\n        )\n        {\n          (this.state.showAllTasks)\n            ? <Tasks tasks={this.state.tasks} />\n            : (this.state.tasks.some(t => t.task.metadata.name.startsWith('04 :: generate')))\n              ? (\n                <ul>\n                  <Task task={this.state.tasks.find(t => t.task.metadata.name.startsWith('04 :: generate'))} />\n                </ul>\n              )\n              : ''\n        }\n      </li>\n    );\n  }\n}\n\nexport default Status;\n","import React from 'react'\nimport Status from './Status';\n\nclass Statuses extends React.Component {\n  render() {\n    return (\n      <ul>\n        {\n          this.props.contexts.map((context, cI) => (\n            <li key={cI}>\n              { context }\n              <ul>\n              {\n                this.props.statuses.filter(s => s.context === context).map((status) => (\n                  <Status status={status} key={status.id} />\n                ))\n              }\n              </ul>\n            </li>\n          ))\n        }\n      </ul>\n    );\n  }\n}\n\nexport default Statuses;\n","import React from 'react'\nimport Card from 'react-bootstrap/Card';\nimport Row from 'react-bootstrap/Row';\nimport Image from 'react-bootstrap/Image';\nimport Statuses from './Statuses';\n\nclass Commit extends React.Component {\n  state = {\n    contexts: [],\n    statuses: []\n  };\n  /*\n  note: to run locally, a cors proxy is required.\n\n  to install a local cors proxy:\n  $ sudo npm install -g local-cors-proxy\n\n  to run a local cors proxy with authenticated github requests:\n  $ lcp --proxyUrl https://grenade:$(pass github/grenade/token/travisci-minionsmanaged-observations)@api.github.com\n  */\n  apiBase = (window.location.hostname === 'localhost')\n    ? 'http://localhost:8010/proxy'\n    : 'https://api.github.com';\n\n  componentDidMount() {\n    fetch(\n      this.apiBase + '/repos/mozilla-platform-ops/cloud-image-builder/commits/' + this.props.commit.sha + '/statuses'\n    )\n    .then(responseGithubApiStatuses => responseGithubApiStatuses.json())\n    .then((githubCommitStatuses) => {\n      if (githubCommitStatuses.length) {\n        this.setState(state => ({\n          contexts: [...new Set(githubCommitStatuses.map(s => s.context))].sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase())),\n          statuses: githubCommitStatuses.filter(s => s.state !== 'pending')\n        }));\n      }\n    })\n    .catch(console.log);\n  }\n\n  render() {\n    return (\n      <li style={{ marginTop: '10px' }}>\n        <Row>\n          <Card style={{ width: '100%' }}>\n            <Card.Header>\n              <a href={this.props.commit.url}>\n                { this.props.commit.sha.substring(0, 7) }\n              </a>\n              &nbsp;\n              {\n                new Intl.DateTimeFormat('en-GB', {\n                  year: 'numeric',\n                  month: 'short',\n                  day: '2-digit',\n                  hour: 'numeric',\n                  minute: 'numeric',\n                  timeZoneName: 'short'\n                }).format(new Date(this.props.commit.committer.date))\n              }\n              <Image\n                src={this.props.commit.author.avatar}\n                alt={this.props.commit.author.name}\n                title={this.props.commit.author.name}\n                rounded={true}\n                style={{ width: '30px', height: '30px', marginLeft: '10px' }}\n                className=\"float-right\" />\n              <span className=\"float-right\">\n                { this.props.commit.author.username }\n              </span>\n            </Card.Header>\n            <Card.Body>\n              <pre>\n                { this.props.commit.message.join('\\n') }\n              </pre>\n              <Statuses contexts={this.state.contexts} statuses={this.state.statuses} />\n            </Card.Body>\n          </Card>\n        </Row>\n      </li>\n    );\n  }\n}\n\nexport default Commit;\n","import React from 'react'\nimport Commit from './Commit';\n\nclass Commits extends React.Component {\n  render() {\n    return (\n      <ul style={{\n        listStyle: 'none',\n        marginLeft: '0',\n        paddingLeft: '0'\n      }}>\n        {\n          this.props.commits.map(commit => (\n            <Commit commit={commit} key={commit.sha} />\n          ))\n        }\n      </ul>\n    );\n  }\n}\n\nexport default Commits;\n","import React from 'react'\nimport Commits from './Commits';\nimport Container from 'react-bootstrap/Container';\n\nclass App extends React.Component {\n  state = {\n    commits: [],\n    // when running locally (through authenticated cors proxy), show all commits, otherwise limit to mitigate github throttling\n    limit: (window.location.hostname === 'localhost') ? 30 : 5\n  };\n  /*\n  note: to run locally, a cors proxy is required.\n\n  to install a local cors proxy:\n  $ sudo npm install -g local-cors-proxy\n\n  to run a local cors proxy with authenticated github requests:\n  $ lcp --proxyUrl https://grenade:$(pass github/grenade/token/travisci-minionsmanaged-observations)@api.github.com\n  */\n  apiBase = (window.location.hostname === 'localhost')\n    ? 'http://localhost:8010/proxy'\n    : 'https://api.github.com';\n\n  componentDidMount() {\n    fetch(\n      this.apiBase + '/repos/mozilla-platform-ops/cloud-image-builder/commits'\n    )\n    .then(responseGithubApiCommits => responseGithubApiCommits.json())\n    .then((githubCommits) => {\n      if (githubCommits.length) {\n        this.setState(state => ({\n          commits: githubCommits.map(c => ({\n            sha: c.sha,\n            url: c.html_url,\n            author: {...c.commit.author, ...{ id: c.author.id, username: c.author.login, avatar: c.author.avatar_url }},\n            committer: {...c.commit.committer, ...{ id: c.committer.id, username: c.committer.login, avatar: c.committer.avatar_url }},\n            message: c.commit.message.split('\\n').filter(line => line !== ''),\n            verification: c.commit.verification\n          })).slice(0, (this.state.limit - 1))\n        }));\n      } else {\n        console.log(githubCommits)\n      }\n    })\n    .catch(console.log);\n  }\n\n  render() {\n    return (\n      <Container>\n\n        <Commits commits={this.state.commits} />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}