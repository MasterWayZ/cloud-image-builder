{"version":3,"sources":["Commit.js","Commits.js","App.js","serviceWorker.js","index.js"],"names":["Commit","state","contexts","statuses","apiBase","window","location","hostname","fetch","this","props","commit","sha","then","responseGithubApiStatuses","json","githubCommitStatuses","length","setState","Set","map","s","context","sort","a","b","toLowerCase","localeCompare","catch","console","log","style","marginTop","Row","Col","xs","Card","Header","href","url","substring","Intl","DateTimeFormat","year","month","day","hour","minute","timeZoneName","format","Date","committer","date","Image","src","author","avatar","alt","name","title","rounded","width","height","marginLeft","className","username","Body","message","join","cI","key","filter","status","id","color","target_url","updated_at","description","creator","login","React","Component","Commits","listStyle","paddingLeft","commits","App","responseGithubApiCommits","githubCommits","c","html_url","avatar_url","split","line","verification","Container","Boolean","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"2UA8HeA,E,4MAvHbC,MAAQ,CACNC,SAAU,GACVC,SAAU,I,EAWZC,QAAwC,cAA7BC,OAAOC,SAASC,SACvB,8BACA,yB,kEAEiB,IAAD,OAClBC,MACEC,KAAKL,QAAU,2DAA6DK,KAAKC,MAAMC,OAAOC,IAAM,aAErGC,MAAK,SAAAC,GAAyB,OAAIA,EAA0BC,UAC5DF,MAAK,SAACG,GACDA,EAAqBC,QACvB,EAAKC,UAAS,SAAAjB,GAAK,MAAK,CACtBC,SAAU,YAAI,IAAIiB,IAAIH,EAAqBI,KAAI,SAAAC,GAAC,OAAIA,EAAEC,aAAWC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,cAAcC,cAAcF,EAAEC,kBAChHvB,SAAUa,SAIfY,MAAMC,QAAQC,O,+BAGP,IAAD,OACP,OACE,wBAAIC,MAAO,CAAEC,UAAW,SACtB,kBAACC,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,MAEA,kBAACA,EAAA,EAAD,CAAKC,GAAI,IACP,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,OAAN,KACE,uBAAGC,KAAM7B,KAAKC,MAAMC,OAAO4B,KACvB9B,KAAKC,MAAMC,OAAOC,IAAI4B,UAAU,EAAG,IAFzC,OAMI,IAAIC,KAAKC,eAAe,QAAS,CAC/BC,KAAM,UACNC,MAAO,QACPC,IAAK,UACLC,KAAM,UACNC,OAAQ,UACRC,aAAc,UACbC,OAAO,IAAIC,KAAKzC,KAAKC,MAAMC,OAAOwC,UAAUC,OAEjD,kBAACC,EAAA,EAAD,CACEC,IAAK7C,KAAKC,MAAMC,OAAO4C,OAAOC,OAC9BC,IAAKhD,KAAKC,MAAMC,OAAO4C,OAAOG,KAC9BC,MAAOlD,KAAKC,MAAMC,OAAO4C,OAAOG,KAChCE,SAAS,EACT7B,MAAO,CAAE8B,MAAO,OAAQC,OAAQ,OAAQC,WAAY,QACpDC,UAAU,gBACZ,0BAAMA,UAAU,eACZvD,KAAKC,MAAMC,OAAO4C,OAAOU,WAG/B,kBAAC7B,EAAA,EAAK8B,KAAN,KACE,6BACIzD,KAAKC,MAAMC,OAAOwD,QAAQC,KAAK,OAEnC,4BAEI3D,KAAKR,MAAMC,SAASkB,KAAI,SAACE,EAAS+C,GAAV,OACtB,wBAAIC,IAAKD,GACL/C,EACF,4BAEE,EAAKrB,MAAME,SAASoE,QAAO,SAAAlD,GAAC,MAAgB,YAAZA,EAAEpB,OAAuBoB,EAAEC,UAAYA,KAASF,KAAI,SAACoD,GAAD,OAClF,wBAAIF,IAAKE,EAAOC,GAAI1C,MAAO,CACzB2C,MAAyB,YAAjBF,EAAOvE,MACX,QACkB,YAAjBuE,EAAOvE,MACN,MACA,UAEN,uBAAGqC,KAAMkC,EAAOG,YAEd,IAAIlC,KAAKC,eAAe,QAAS,CAC/BC,KAAM,UACNC,MAAO,QACPC,IAAK,UACLC,KAAM,UACNC,OAAQ,UACRC,aAAc,UACbC,OAAO,IAAIC,KAAKsB,EAAOI,cAhB9B,OAoBGJ,EAAOK,YAAYnD,cApBtB,sBAsBiB8C,EAAOM,QAAQC,MAtBhC,uB,GAhFLC,IAAMC,WCeZC,E,uKAhBX,OACE,wBAAInD,MAAO,CACToD,UAAW,OACXpB,WAAY,IACZqB,YAAa,MAGX3E,KAAKC,MAAM2E,QAAQjE,KAAI,SAAAT,GAAM,OAC3B,kBAAC,EAAD,CAAQA,OAAQA,EAAQ2D,IAAK3D,EAAOC,c,GAV1BoE,IAAMC,W,QCiDbK,E,4MA/CbrF,MAAQ,CACNoF,QAAS,I,EAWXjF,QAAwC,cAA7BC,OAAOC,SAASC,SACvB,8BACA,yB,kEAEiB,IAAD,OAClBC,MACEC,KAAKL,QAAU,2DAEhBS,MAAK,SAAA0E,GAAwB,OAAIA,EAAyBxE,UAC1DF,MAAK,SAAC2E,GACDA,EAAcvE,QAChB,EAAKC,UAAS,SAAAjB,GAAK,MAAK,CACtBoF,QAASG,EAAcpE,KAAI,SAAAqE,GAAC,MAAK,CAC/B7E,IAAK6E,EAAE7E,IACP2B,IAAKkD,EAAEC,SACPnC,OAAO,2BAAKkC,EAAE9E,OAAO4C,QAAW,CAAEkB,GAAIgB,EAAElC,OAAOkB,GAAIR,SAAUwB,EAAElC,OAAOwB,MAAOvB,OAAQiC,EAAElC,OAAOoC,aAC9FxC,UAAU,2BAAKsC,EAAE9E,OAAOwC,WAAc,CAAEsB,GAAIgB,EAAEtC,UAAUsB,GAAIR,SAAUwB,EAAEtC,UAAU4B,MAAOvB,OAAQiC,EAAEtC,UAAUwC,aAC7GxB,QAASsB,EAAE9E,OAAOwD,QAAQyB,MAAM,MAAMrB,QAAO,SAAAsB,GAAI,MAAa,KAATA,KACrDC,aAAcL,EAAE9E,OAAOmF,wBAK9BlE,MAAMC,QAAQC,O,+BAIf,OACE,kBAACiE,EAAA,EAAD,KACE,kBAAC,EAAD,CAASV,QAAS5E,KAAKR,MAAMoF,e,GA1CnBL,IAAMC,WCQJe,QACW,cAA7B3F,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS0F,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5F,MAAK,SAAA6F,GACJA,EAAaC,gBAEd/E,OAAM,SAAAgF,GACL/E,QAAQ+E,MAAMA,EAAMzC,c","file":"static/js/main.81eaf14c.chunk.js","sourcesContent":["import React from 'react'\nimport Card from 'react-bootstrap/Card';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Image from 'react-bootstrap/Image';\n\nclass Commit extends React.Component {\n  state = {\n    contexts: [],\n    statuses: []\n  };\n  /*\n  note: to run locally, a cors proxy is required.\n\n  to install a local cors proxy:\n  $ sudo npm install -g local-cors-proxy\n\n  to run a local cors proxy with authenticated github requests:\n  $ lcp --proxyUrl https://grenade:$(pass github/grenade/token/travisci-minionsmanaged-observations)@api.github.com\n  */\n  apiBase = (window.location.hostname === 'localhost')\n    ? 'http://localhost:8010/proxy'\n    : 'https://api.github.com';\n\n  componentDidMount() {\n    fetch(\n      this.apiBase + '/repos/mozilla-platform-ops/cloud-image-builder/commits/' + this.props.commit.sha + '/statuses'\n    )\n    .then(responseGithubApiStatuses => responseGithubApiStatuses.json())\n    .then((githubCommitStatuses) => {\n      if (githubCommitStatuses.length) {\n        this.setState(state => ({\n          contexts: [...new Set(githubCommitStatuses.map(s => s.context))].sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase())),\n          statuses: githubCommitStatuses\n        }));\n      }\n    })\n    .catch(console.log);\n  }\n\n  render() {\n    return (\n      <li style={{ marginTop: '10px' }}>\n        <Row>\n        <Col>\n        </Col>\n        <Col xs={11}>\n          <Card>\n            <Card.Header>\n              <a href={this.props.commit.url}>\n                { this.props.commit.sha.substring(0, 7) }\n              </a>\n              &nbsp;\n              {\n                new Intl.DateTimeFormat('en-GB', {\n                  year: 'numeric',\n                  month: 'short',\n                  day: '2-digit',\n                  hour: 'numeric',\n                  minute: 'numeric',\n                  timeZoneName: 'short'\n                }).format(new Date(this.props.commit.committer.date))\n              }\n              <Image\n                src={this.props.commit.author.avatar}\n                alt={this.props.commit.author.name}\n                title={this.props.commit.author.name}\n                rounded={true}\n                style={{ width: '30px', height: '30px', marginLeft: '10px' }}\n                className=\"float-right\" />\n              <span className=\"float-right\">\n                { this.props.commit.author.username }\n              </span>\n            </Card.Header>\n            <Card.Body>\n              <pre>\n                { this.props.commit.message.join('\\n') }\n              </pre>\n              <ul>\n                {\n                  this.state.contexts.map((context, cI) => (\n                    <li key={cI}>\n                      { context }\n                      <ul>\n                      {\n                        this.state.statuses.filter(s => s.state !== 'pending' && s.context === context).map((status) => (\n                          <li key={status.id} style={{\n                            color: (status.state === 'success')\n                              ? 'green'\n                              : (status.state === 'failure')\n                                ? 'red'\n                                : 'black'\n                          }}>\n                            <a href={status.target_url}>\n                            {\n                              new Intl.DateTimeFormat('en-GB', {\n                                year: 'numeric',\n                                month: 'short',\n                                day: '2-digit',\n                                hour: 'numeric',\n                                minute: 'numeric',\n                                timeZoneName: 'short'\n                              }).format(new Date(status.updated_at))\n                            }\n                            </a>\n                            &nbsp;\n                            {status.description.toLowerCase()}\n                            &nbsp;\n                            (triggered by {status.creator.login})\n                          </li>\n                        ))\n                      }\n                      </ul>\n                    </li>\n                  ))\n                }\n              </ul>\n            </Card.Body>\n          </Card>\n        </Col>\n        </Row>\n      </li>\n    );\n  }\n}\n\nexport default Commit;\n","import React from 'react'\nimport Commit from './Commit';\n\nclass Commits extends React.Component {\n  render() {\n    return (\n      <ul style={{\n        listStyle: 'none',\n        marginLeft: '0',\n        paddingLeft: '0'\n      }}>\n        {\n          this.props.commits.map(commit => (\n            <Commit commit={commit} key={commit.sha} />\n          ))\n        }\n      </ul>\n    );\n  }\n}\n\nexport default Commits;\n","import React from 'react'\nimport Commits from './Commits';\nimport Container from 'react-bootstrap/Container';\n\nclass App extends React.Component {\n  state = {\n    commits: []\n  };\n  /*\n  note: to run locally, a cors proxy is required.\n\n  to install a local cors proxy:\n  $ sudo npm install -g local-cors-proxy\n\n  to run a local cors proxy with authenticated github requests:\n  $ lcp --proxyUrl https://grenade:$(pass github/grenade/token/travisci-minionsmanaged-observations)@api.github.com\n  */\n  apiBase = (window.location.hostname === 'localhost')\n    ? 'http://localhost:8010/proxy'\n    : 'https://api.github.com';\n\n  componentDidMount() {\n    fetch(\n      this.apiBase + '/repos/mozilla-platform-ops/cloud-image-builder/commits'\n    )\n    .then(responseGithubApiCommits => responseGithubApiCommits.json())\n    .then((githubCommits) => {\n      if (githubCommits.length) {\n        this.setState(state => ({\n          commits: githubCommits.map(c => ({\n            sha: c.sha,\n            url: c.html_url,\n            author: {...c.commit.author, ...{ id: c.author.id, username: c.author.login, avatar: c.author.avatar_url }},\n            committer: {...c.commit.committer, ...{ id: c.committer.id, username: c.committer.login, avatar: c.committer.avatar_url }},\n            message: c.commit.message.split('\\n').filter(line => line !== ''),\n            verification: c.commit.verification\n          }))\n        }));\n      }\n    })\n    .catch(console.log);\n  }\n\n  render() {\n    return (\n      <Container>\n        <Commits commits={this.state.commits} />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}