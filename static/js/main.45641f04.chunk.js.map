{"version":3,"sources":["Run.js","Runs.js","Task.js","Tasks.js","Status.js","Statuses.js","Commit.js","Commits.js","App.js","serviceWorker.js","index.js"],"names":["Run","state","artifacts","images","fetch","this","props","rootUrl","taskId","run","runId","then","responseArtifactsApi","json","container","length","setState","some","a","name","startsWith","endsWith","artifact","find","responseArtifactApi","launchConfigs","map","launchConfig","storageProfile","imageReference","id","console","log","catch","style","color","href","image","key","substring","lastIndexOf","React","Component","Runs","runs","Task","task","status","metadata","Tasks","tasks","Status","showAllTasks","taskGroupId","taskCount","builds","travisApiResponse","travisBuildResults","context","pathname","URL","target_url","buildId","responseBuildsApi","matrix","taskGroupHtmlUrl","tasksApi","hostname","responseTasksApi","Intl","DateTimeFormat","year","month","day","hour","minute","timeZoneName","format","Date","updated_at","description","toLowerCase","title","filter","t","result","b","Statuses","contexts","cI","statuses","s","Commit","window","location","commit","sha","responseGithubApiStatuses","githubCommitStatuses","Set","sort","localeCompare","marginTop","Row","Card","width","Header","url","committer","date","Image","src","author","avatar","alt","rounded","height","marginLeft","className","username","Body","message","join","Commits","listStyle","paddingLeft","commits","App","responseGithubApiCommits","githubCommits","c","html_url","login","avatar_url","split","line","verification","Container","Boolean","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.45641f04.chunk.js","sourcesContent":["import React from 'react'\n\nclass Run extends React.Component {\n  state = {\n    artifacts: [],\n    images: []\n  };\n\n  componentDidMount() {\n    fetch(this.props.rootUrl + '/api/queue/v1/task/' + this.props.taskId + '/runs/' + this.props.run.runId + '/artifacts')\n    .then(responseArtifactsApi => responseArtifactsApi.json())\n    .then((container) => {\n      if (container.artifacts && container.artifacts.length) {\n        this.setState(state => ({\n          artifacts: container.artifacts\n        }));\n        if (container.artifacts.some(a => a.name.startsWith('public/') && a.name.endsWith('.json'))) {\n          let artifact = container.artifacts.find(a => a.name.startsWith('public/') && a.name.endsWith('.json'))\n          fetch(this.props.rootUrl + '/api/queue/v1/task/' + this.props.taskId + '/runs/' + this.props.run.runId + '/artifacts/' + artifact.name)\n          .then(responseArtifactApi => responseArtifactApi.json())\n          .then((container) => {\n            if (container.launchConfigs && container.launchConfigs.length) {\n              this.setState(state => ({\n                images: container.launchConfigs.map(launchConfig => launchConfig.storageProfile.imageReference.id)\n              }));\n            } else {\n              console.log(container);\n            }\n          })\n          .catch(console.log);\n        }\n      } else {\n        console.log(container);\n      }\n    })\n    .catch(console.log);\n  }\n\n  render() {\n    return (\n      <li style={{\n        color: (this.props.run.state === 'completed')\n          ? 'green'\n          : (this.props.run.state === 'failed')\n            ? 'red'\n            : (this.props.run.state === 'exception')\n              ? 'orange'\n              : 'gray'\n      }}>\n        <a href={this.props.rootUrl + '/tasks/' + this.props.taskId}>\n          {this.props.taskId}/{this.props.run.runId}\n        </a> {this.props.run.state}\n          {\n            (this.props.run.state === 'completed')\n              ? (\n                <ul>\n                  {\n                    this.state.images.map(image => (\n                      <li key={image}>\n                        {image.substring(image.lastIndexOf('/') + 1)}\n                      </li>\n                    ))\n                  }\n                </ul>\n              )\n              : ''\n          }\n      </li>\n    );\n  }\n}\n\nexport default Run;\n","import React from 'react'\nimport Run from './Run';\n\nclass Runs extends React.Component {\n  render() {\n    return (\n      <ul>\n        {\n          this.props.runs.map(run => (\n            <Run run={run} key={run.runId} taskId={this.props.taskId} rootUrl={this.props.rootUrl} />\n          ))\n        }\n      </ul>\n    );\n  }\n}\n\nexport default Runs;\n","import React from 'react'\nimport Runs from './Runs';\n\nclass Task extends React.Component {\n  render() {\n    return (\n      <li style={{\n        color: (this.props.task.status.state === 'completed')\n          ? 'green'\n          : (this.props.task.status.state === 'failed')\n            ? 'red'\n            : (this.props.task.status.state === 'exception')\n              ? 'orange'\n              : 'gray'\n      }}>\n        {this.props.task.task.metadata.name}\n        <Runs runs={this.props.task.status.runs} taskId={this.props.task.status.taskId} rootUrl={this.props.rootUrl} />\n      </li>\n    );\n  }\n}\n\nexport default Task;\n","import React from 'react'\nimport Task from './Task';\n\nclass Tasks extends React.Component {\n  render() {\n    return (\n      <ul>\n        {\n          this.props.tasks.map(task => (\n            <Task task={task} key={task.status.taskId} rootUrl={this.props.rootUrl} />\n          ))\n        }\n      </ul>\n    );\n  }\n}\n\nexport default Tasks;\n","import React from 'react'\nimport Task from './Task';\nimport Tasks from './Tasks';\n\nclass Status extends React.Component {\n  state = {\n    showAllTasks: false,\n    taskGroupId: null,\n    taskCount: 0,\n    tasks: [],\n    builds: [],\n    travisApiResponse: {}\n  };\n  travisBuildResults = [\n    'completed',\n    'failed',\n  ];\n\n  componentDidMount() {\n    switch (this.props.status.context) {\n      case 'continuous-integration/travis-ci/push':\n        let pathname = (new URL(this.props.status.target_url)).pathname;\n        let buildId = pathname.substring(pathname.lastIndexOf('/') + 1);\n        this.setState(state => ({\n          taskGroupId: buildId\n        }));\n        let buildsApi = 'https://api.travis-ci.org/repos/mozilla-platform-ops/cloud-image-builder/builds/' + buildId;\n        fetch(buildsApi)\n        .then(responseBuildsApi => responseBuildsApi.json())\n        .then((container) => {\n          if (container.matrix) {\n            this.setState(state => ({\n              taskCount: container.matrix.length,\n              builds: container.matrix,\n              travisApiResponse: container\n            }));\n          }\n        })\n        .catch(console.log);\n        break;\n      default:\n        let taskGroupHtmlUrl = new URL(this.props.status.target_url);\n        let taskGroupId = this.props.status.target_url.substring(this.props.status.target_url.lastIndexOf('/') + 1);\n        this.setState(state => ({\n          taskGroupId: taskGroupId\n        }));\n        let tasksApi = 'https://' + taskGroupHtmlUrl.hostname + '/api/queue/v1/task-group/' + taskGroupId + '/list';\n        fetch(tasksApi)\n        .then(responseTasksApi => responseTasksApi.json())\n        .then((container) => {\n          if (container.tasks && container.tasks.length) {\n            this.setState(state => ({\n              taskCount: container.tasks.length,\n              tasks: container.tasks//.sort((a, b) => a.task.metadata.name.localeCompare(b.task.metadata.name))\n            }));\n          }\n        })\n        .catch(console.log);\n        break;\n    }\n  }\n\n  render() {\n    return (\n      <li style={{\n        color: (this.props.status.state === 'success')\n          ? 'green'\n          : (this.props.status.state === 'failure')\n            ? 'red'\n            : 'gray'\n      }}>\n        {\n          new Intl.DateTimeFormat('en-GB', {\n            year: 'numeric',\n            month: 'short',\n            day: '2-digit',\n            hour: 'numeric',\n            minute: 'numeric',\n            timeZoneName: 'short'\n          }).format(new Date(this.props.status.updated_at))\n        }\n        &nbsp;\n        {this.props.status.description.toLowerCase()}\n        &nbsp;\n        ({this.state.taskCount} tasks in group <a href={this.props.status.target_url} title={this.state.taskGroupId}>{this.state.taskGroupId && this.state.taskGroupId.substring(0, 7)}...</a>\n        &nbsp;\n        [\n          {\n            ['completed', 'failed', 'exception', 'running', 'pending', 'unscheduled'].map(status => (\n              (this.state.tasks.filter(t => t.status.state === status).length)\n                ? (\n                  <span style={{\n                    color: (status === 'completed')\n                      ? 'green'\n                      : (status === 'failed')\n                        ? 'red'\n                        : (status === 'exception')\n                          ? 'orange'\n                          : (status === 'pending')\n                            ? 'darkorchid'\n                            : (status === 'running')\n                              ? 'steelblue'\n                              : (status === 'unscheduled')\n                                ? 'gray'\n                                : 'black' }}>\n                    &nbsp;{status}: {this.state.tasks.filter(t => t.status.state === status).length}&nbsp;\n                  </span>\n                )\n                : ''\n            ))\n          }\n          {\n            [0, 1].map(result => (\n              (this.state.builds.filter(b => b.result === result).length)\n                ? (\n                  <span style={{\n                    color: (result === 0)\n                      ? 'green'\n                      : (result === 1)\n                        ? 'red'\n                        : 'black' }}>\n                    &nbsp;{this.travisBuildResults[result]}: {this.state.builds.filter(b => b.result === result).length}&nbsp;\n                  </span>\n                )\n                : ''\n            ))\n          }\n        ]\n        )\n        {\n          (this.state.showAllTasks)\n            ? <Tasks tasks={this.state.tasks} rootUrl={'https://' + (new URL(this.props.status.target_url)).hostname} />\n            : (\n                <ul>\n                  {\n                    (this.state.tasks.filter(t => t.task.metadata.name.startsWith('04 :: generate')).map(task => (\n                      <Task task={task} rootUrl={'https://' + (new URL(this.props.status.target_url)).hostname} />\n                    )))\n                  }\n                </ul>\n              )\n        }\n      </li>\n    );\n  }\n}\n\nexport default Status;\n","import React from 'react'\nimport Status from './Status';\n\nclass Statuses extends React.Component {\n  render() {\n    return (\n      <ul>\n        {\n          this.props.contexts.map((context, cI) => (\n            <li key={cI}>\n              { context }\n              <ul>\n              {\n                // only show pending statuses if there are no others (eg: failed/completed)\n                (this.props.statuses.some(s => s.context === context && s.state !== 'pending'))\n                  ? this.props.statuses.filter(s => s.context === context && s.state !== 'pending').map((status) => (\n                    <Status status={status} key={status.id} />\n                  ))\n                  : this.props.statuses.filter(s => s.context === context).map((status) => (\n                    <Status status={status} key={status.id} />\n                  ))\n              }\n              </ul>\n            </li>\n          ))\n        }\n      </ul>\n    );\n  }\n}\n\nexport default Statuses;\n","import React from 'react'\nimport Card from 'react-bootstrap/Card';\nimport Row from 'react-bootstrap/Row';\nimport Image from 'react-bootstrap/Image';\nimport Statuses from './Statuses';\n\nclass Commit extends React.Component {\n  state = {\n    contexts: [],\n    statuses: []\n  };\n  /*\n  note: to run locally, a cors proxy is required.\n\n  to install a local cors proxy:\n  $ sudo npm install -g local-cors-proxy\n\n  to run a local cors proxy with authenticated github requests:\n  $ lcp --proxyUrl https://grenade:$(pass github/grenade/token/cloud-image-builder)@api.github.com\n  */\n\n  componentDidMount() {\n    fetch(\n      (window.location.hostname === 'localhost')\n        ? 'http://localhost:8010/proxy/repos/mozilla-platform-ops/cloud-image-builder/commits/' + this.props.commit.sha + '/statuses'\n        : 'https://grenade-cors-proxy.herokuapp.com/https://api.github.com/repos/mozilla-platform-ops/cloud-image-builder/commits/' + this.props.commit.sha + '/statuses'\n    )\n    .then(responseGithubApiStatuses => responseGithubApiStatuses.json())\n    .then((githubCommitStatuses) => {\n      if (githubCommitStatuses.length) {\n        this.setState(state => ({\n          contexts: [...new Set(githubCommitStatuses.map(s => s.context))].sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase())),\n          statuses: githubCommitStatuses//.filter(s => s.state !== 'pending')\n        }));\n      }\n    })\n    .catch(console.log);\n  }\n\n  render() {\n    return (\n      <li style={{ marginTop: '10px' }}>\n        <Row>\n          <Card style={{ width: '100%' }}>\n            <Card.Header>\n              <a href={this.props.commit.url}>\n                { this.props.commit.sha.substring(0, 7) }\n              </a>\n              &nbsp;\n              {\n                new Intl.DateTimeFormat('en-GB', {\n                  year: 'numeric',\n                  month: 'short',\n                  day: '2-digit',\n                  hour: 'numeric',\n                  minute: 'numeric',\n                  timeZoneName: 'short'\n                }).format(new Date(this.props.commit.committer.date))\n              }\n              <Image\n                src={this.props.commit.author.avatar}\n                alt={this.props.commit.author.name}\n                title={this.props.commit.author.name}\n                rounded={true}\n                style={{ width: '30px', height: '30px', marginLeft: '10px' }}\n                className=\"float-right\" />\n              <span className=\"float-right\">\n                { this.props.commit.author.username }\n              </span>\n            </Card.Header>\n            <Card.Body>\n              <pre>\n                { this.props.commit.message.join('\\n') }\n              </pre>\n              <Statuses contexts={this.state.contexts} statuses={this.state.statuses} />\n            </Card.Body>\n          </Card>\n        </Row>\n      </li>\n    );\n  }\n}\n\nexport default Commit;\n","import React from 'react'\nimport Commit from './Commit';\n\nclass Commits extends React.Component {\n  render() {\n    return (\n      <ul style={{\n        listStyle: 'none',\n        marginLeft: '0',\n        paddingLeft: '0'\n      }}>\n        {\n          this.props.commits.map(commit => (\n            <Commit commit={commit} key={commit.sha} />\n          ))\n        }\n      </ul>\n    );\n  }\n}\n\nexport default Commits;\n","import React from 'react'\nimport Commits from './Commits';\nimport Container from 'react-bootstrap/Container';\n\nclass App extends React.Component {\n  state = {\n    commits: []\n  };\n  /*\n  note: to run locally, a cors proxy is required.\n\n  to install a local cors proxy:\n  $ sudo npm install -g local-cors-proxy\n\n  to run a local cors proxy with authenticated github requests:\n  $ lcp --proxyUrl https://grenade:$(pass github/grenade/token/cloud-image-builder)@api.github.com\n  */\n\n  componentDidMount() {\n    fetch(\n      (window.location.hostname === 'localhost')\n        ? 'http://localhost:8010/proxy/repos/mozilla-platform-ops/cloud-image-builder/commits'\n        : 'https://grenade-cors-proxy.herokuapp.com/https://api.github.com/repos/mozilla-platform-ops/cloud-image-builder/commits'\n    )\n    .then(responseGithubApiCommits => responseGithubApiCommits.json())\n    .then((githubCommits) => {\n      if (githubCommits.length) {\n        this.setState(state => ({\n          commits: githubCommits.map(c => ({\n            sha: c.sha,\n            url: c.html_url,\n            author: {...c.commit.author, ...{ id: c.author.id, username: c.author.login, avatar: c.author.avatar_url }},\n            committer: {...c.commit.committer, ...{ id: c.committer.id, username: c.committer.login, avatar: c.committer.avatar_url }},\n            message: c.commit.message.split('\\n').filter(line => line !== ''),\n            verification: c.commit.verification\n          }))\n        }));\n      } else {\n        console.log(githubCommits)\n      }\n    })\n    .catch(console.log);\n  }\n\n  render() {\n    return (\n      <Container>\n        <Commits commits={this.state.commits} />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}