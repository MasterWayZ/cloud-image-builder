{"version":3,"sources":["CommitMessage.js","Run.js","Runs.js","Task.js","Tasks.js","Status.js","Statuses.js","Commit.js","Commits.js","App.js","serviceWorker.js","index.js"],"names":["CommitMessage","state","isPoolDeploy","include","environments","keys","pools","regions","exclude","integrations","this","setState","props","message","some","line","startsWith","find","replace","split","filter","l","map","inex","type","item","Badge","style","margin","variant","React","Component","Run","artifacts","images","fetch","rootUrl","taskId","run","runId","then","responseArtifactsApi","json","container","length","a","name","endsWith","artifact","responseArtifactApi","launchConfigs","launchConfig","storageProfile","imageReference","id","console","log","catch","color","href","image","key","substring","lastIndexOf","Runs","runs","Task","task","status","metadata","title","Tasks","tasks","Status","showAllTasks","taskGroupId","taskCount","builds","travisApiResponse","travisBuildResults","badgeVariants","completed","failed","exception","running","pending","unscheduled","context","pathname","URL","target_url","buildId","responseBuildsApi","matrix","taskGroupHtmlUrl","tasksApi","hostname","responseTasksApi","Intl","DateTimeFormat","year","month","day","hour","minute","timeZoneName","format","Date","updated_at","description","toLowerCase","Object","t","result","b","Statuses","contexts","cI","statuses","s","Commit","window","location","commit","sha","responseGithubApiStatuses","githubCommitStatuses","Set","sort","localeCompare","marginTop","Row","Card","width","Header","committer","date","url","Image","src","author","avatar","alt","rounded","height","marginLeft","className","username","Body","join","Commits","listStyle","paddingLeft","commits","App","responseGithubApiCommits","githubCommits","c","html_url","login","avatar_url","verification","Container","Boolean","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.b2570889.chunk.js","sourcesContent":["import React from 'react';\nimport Badge from 'react-bootstrap/Badge';\n\nclass CommitMessage extends React.Component {\n  state = {\n    isPoolDeploy: false,\n    include: {\n      environments: [],\n      keys: [],\n      pools: [],\n      regions: []\n    },\n    exclude: {\n      environments: [],\n      integrations: [],\n      keys: [],\n      pools: [],\n      regions: []\n    }\n  };\n  componentDidMount() {\n    this.setState(state => ({\n      isPoolDeploy: this.props.message.some(line => line === 'pool-deploy'),\n      include: {\n        environments: [\n          ...(this.props.message.some(line => line.startsWith('include environments: ')) ? this.props.message.find(line => line.startsWith('include environments: ')).replace('include environments: ', '').split(', ') : [])\n        ],\n        keys: [\n          ...(this.props.message.some(line => line.startsWith('include keys: ')) ? this.props.message.find(line => line.startsWith('include keys: ')).replace('include keys: ', '').split(', ') : [])\n        ],\n        pools: [\n          ...(this.props.message.some(line => line.startsWith('include pools: ')) ? this.props.message.find(line => line.startsWith('include pools: ')).replace('include pools: ', '').split(', ') : [])\n        ],\n        regions: [\n          ...(this.props.message.some(line => line.startsWith('include regions: ')) ? this.props.message.find(line => line.startsWith('include regions: ')).replace('include regions: ', '').split(', ') : [])\n        ]\n      },\n      exclude: {\n        environments: [\n          ...(this.props.message.some(line => line.startsWith('exclude environments: ')) ? this.props.message.find(line => line.startsWith('exclude environments: ')).replace('exclude environments: ', '').split(', ') : [])\n        ],\n        integrations: [\n          ...((this.props.message.some(line => line === 'no-ci') || (this.props.message.some(line => line === 'no-taskcluster-ci'))) ? ['taskcluster'] : []),\n          ...((this.props.message.some(line => line === 'no-ci') || (this.props.message.some(line => line === 'no-travis-ci'))) ? ['taskcluster'] : [])\n        ],\n        keys: [\n          ...(this.props.message.some(line => line.startsWith('exclude keys: ')) ? this.props.message.find(line => line.startsWith('exclude keys: ')).replace('exclude keys: ', '').split(', ') : [])\n        ],\n        pools: [\n          ...(this.props.message.some(line => line.startsWith('exclude pools: ')) ? this.props.message.find(line => line.startsWith('exclude pools: ')).replace('exclude pools: ', '').split(', ') : [])\n        ],\n        regions: [\n          ...(this.props.message.some(line => line.startsWith('exclude regions: ')) ? this.props.message.find(line => line.startsWith('exclude regions: ')).replace('exclude regions: ', '').split(', ') : [])\n        ]\n      }\n    }));\n  }\n  render() {\n    return (\n      <div>\n        {\n          this.props.message.filter(l => (\n            l !== 'no-ci'\n            && l !== 'no-taskcluster-ci'\n            && l !== 'no-travis-ci'\n            && !l.startsWith('exclude environments: ')\n            && !l.startsWith('include environments: ')\n            && !l.startsWith('exclude keys: ')\n            && !l.startsWith('include keys: ')\n            && !l.startsWith('exclude pools: ')\n            && !l.startsWith('include pools: ')\n            && !l.startsWith('exclude regions: ')\n            && !l.startsWith('include regions: ')\n          )).map(line => (\n            <span>\n              {line}\n              <br />\n            </span>\n          ))\n        }\n        {\n          ['include', 'exclude'].map(inex => (\n            ['environments', 'integrations', 'keys', 'pools', 'regions'].map(type => (\n              this.props.message.filter(line => line.startsWith(inex + ' ' + type + ': ')).map(line => (\n                line.replace(inex + ' ' + type + ': ', '').split(', ').map(item => (\n                  <Badge style={{ margin: '0 1px' }} variant={(inex === 'include') ? 'light' : 'dark'}>\n                    {inex + ' ' + type.replace('s', '') + ': ' + item}\n                  </Badge>\n                ))\n              ))\n            ))\n          ))\n        }\n      </div>\n    );\n  }\n}\n\nexport default CommitMessage;\n","import React from 'react'\n\nclass Run extends React.Component {\n  state = {\n    artifacts: [],\n    images: []\n  };\n\n  componentDidMount() {\n    fetch(this.props.rootUrl + '/api/queue/v1/task/' + this.props.taskId + '/runs/' + this.props.run.runId + '/artifacts')\n    .then(responseArtifactsApi => responseArtifactsApi.json())\n    .then((container) => {\n      if (container.artifacts && container.artifacts.length) {\n        this.setState(state => ({\n          artifacts: container.artifacts\n        }));\n        if (container.artifacts.some(a => a.name.startsWith('public/') && a.name.endsWith('.json'))) {\n          let artifact = container.artifacts.find(a => a.name.startsWith('public/') && a.name.endsWith('.json'))\n          fetch(this.props.rootUrl + '/api/queue/v1/task/' + this.props.taskId + '/runs/' + this.props.run.runId + '/artifacts/' + artifact.name)\n          .then(responseArtifactApi => responseArtifactApi.json())\n          .then((container) => {\n            if (container.launchConfigs && container.launchConfigs.length) {\n              this.setState(state => ({\n                images: container.launchConfigs.map(launchConfig => launchConfig.storageProfile.imageReference.id)\n              }));\n            } else {\n              console.log(container);\n            }\n          })\n          .catch(console.log);\n        }\n      } else {\n        console.log(container);\n      }\n    })\n    .catch(console.log);\n  }\n\n  render() {\n    return (\n      <li style={{\n        color: (this.props.run.state === 'completed')\n          ? 'green'\n          : (this.props.run.state === 'failed')\n            ? 'red'\n            : (this.props.run.state === 'exception')\n              ? 'orange'\n              : (this.props.run.state === 'pending')\n                ? 'darkorchid'\n                : (this.props.run.state === 'running')\n                  ? 'steelblue'\n                  : (this.props.run.state === 'unscheduled')\n                    ? 'gray'\n                    : 'black' }}>\n        <a href={this.props.rootUrl + '/tasks/' + this.props.taskId}>\n         run {this.props.run.runId}\n        </a> {this.props.run.state}\n          {\n            (this.props.run.state === 'completed')\n              ? (\n                <ul style={{ color: 'black' }}>\n                  {\n                    this.state.images.map(image => (\n                      <li key={image}>\n                        {image.substring(image.lastIndexOf('/') + 1)}\n                      </li>\n                    ))\n                  }\n                </ul>\n              )\n              : ''\n          }\n      </li>\n    );\n  }\n}\n\nexport default Run;\n","import React from 'react'\nimport Run from './Run';\n\nclass Runs extends React.Component {\n  render() {\n    return (\n      <ul>\n        {\n          this.props.runs.map(run => (\n            <Run run={run} key={run.runId} taskId={this.props.taskId} rootUrl={this.props.rootUrl} />\n          ))\n        }\n      </ul>\n    );\n  }\n}\n\nexport default Runs;\n","import React from 'react'\nimport Runs from './Runs';\n\nclass Task extends React.Component {\n  render() {\n    return (\n      <li style={{\n        color: (this.props.task.status.state === 'completed')\n          ? 'green'\n          : (this.props.task.status.state === 'failed')\n            ? 'red'\n            : (this.props.task.status.state === 'exception')\n              ? 'orange'\n              : (this.props.task.status.state === 'pending')\n                ? 'darkorchid'\n                : (this.props.task.status.state === 'running')\n                  ? 'steelblue'\n                  : (this.props.task.status.state === 'unscheduled')\n                    ? 'gray'\n                    : 'black' }}>\n        {this.props.task.task.metadata.name}\n        &nbsp;\n        <a href={this.props.rootUrl + '/tasks/' + this.props.task.status.taskId} title={this.props.task.status.taskId}>\n          {this.props.task.status.taskId.substring(0, 7)}...\n        </a>\n        <Runs runs={this.props.task.status.runs} taskId={this.props.task.status.taskId} rootUrl={this.props.rootUrl} />\n      </li>\n    );\n  }\n}\n\nexport default Task;\n","import React from 'react'\nimport Task from './Task';\n\nclass Tasks extends React.Component {\n  render() {\n    return (\n      <ul>\n        {\n          this.props.tasks.map(task => (\n            <Task task={task} key={task.status.taskId} rootUrl={this.props.rootUrl} />\n          ))\n        }\n      </ul>\n    );\n  }\n}\n\nexport default Tasks;\n","import React from 'react'\nimport Task from './Task';\nimport Tasks from './Tasks';\nimport Badge from 'react-bootstrap/Badge';\n\nclass Status extends React.Component {\n  state = {\n    showAllTasks: false,\n    taskGroupId: null,\n    taskCount: 0,\n    tasks: [],\n    builds: [],\n    travisApiResponse: {}\n  };\n  travisBuildResults = [\n    'completed',\n    'failed',\n  ];\n  badgeVariants = {\n    completed: 'success',\n    failed: 'danger',\n    exception: 'warning',\n    running: 'primary',\n    pending: 'info',\n    unscheduled: 'secondary'\n  }\n\n  componentDidMount() {\n    switch (this.props.status.context) {\n      case 'continuous-integration/travis-ci/push':\n        let pathname = (new URL(this.props.status.target_url)).pathname;\n        let buildId = pathname.substring(pathname.lastIndexOf('/') + 1);\n        this.setState(state => ({\n          taskGroupId: buildId\n        }));\n        let buildsApi = 'https://api.travis-ci.org/repos/mozilla-platform-ops/cloud-image-builder/builds/' + buildId;\n        fetch(buildsApi)\n        .then(responseBuildsApi => responseBuildsApi.json())\n        .then((container) => {\n          if (container.matrix) {\n            this.setState(state => ({\n              taskCount: container.matrix.length,\n              builds: container.matrix,\n              travisApiResponse: container\n            }));\n          }\n        })\n        .catch(console.log);\n        break;\n      default:\n        let taskGroupHtmlUrl = new URL(this.props.status.target_url);\n        let taskGroupId = this.props.status.target_url.substring(this.props.status.target_url.lastIndexOf('/') + 1);\n        this.setState(state => ({\n          taskGroupId: taskGroupId\n        }));\n        let tasksApi = 'https://' + taskGroupHtmlUrl.hostname + '/api/queue/v1/task-group/' + taskGroupId + '/list';\n        fetch(tasksApi)\n        .then(responseTasksApi => responseTasksApi.json())\n        .then((container) => {\n          if (container.tasks && container.tasks.length) {\n            this.setState(state => ({\n              taskCount: container.tasks.length,\n              tasks: container.tasks//.sort((a, b) => a.task.metadata.name.localeCompare(b.task.metadata.name))\n            }));\n          }\n        })\n        .catch(console.log);\n        break;\n    }\n  }\n\n  render() {\n    return (\n      <li style={{\n        color: (this.props.status.state === 'success')\n          ? 'green'\n          : (this.props.status.state === 'failure')\n            ? 'red'\n            : 'gray'\n      }}>\n        {\n          new Intl.DateTimeFormat('en-GB', {\n            year: 'numeric',\n            month: 'short',\n            day: '2-digit',\n            hour: 'numeric',\n            minute: 'numeric',\n            timeZoneName: 'short'\n          }).format(new Date(this.props.status.updated_at))\n        }\n        &nbsp;\n        {this.props.status.description.toLowerCase()}\n        &nbsp;\n        ({this.state.taskCount} tasks in group <a href={this.props.status.target_url} title={this.state.taskGroupId}>{this.state.taskGroupId && this.state.taskGroupId.substring(0, 7)}...</a>\n        &nbsp;\n        {\n          Object.keys(this.badgeVariants).map(status => (\n            (this.state.tasks.filter(t => t.status.state === status).length)\n              ? (\n                  <Badge style={{ margin: '0 1px' }} variant={this.badgeVariants[status]} title={status + ': ' + this.state.tasks.filter(t => t.status.state === status).length}>\n                    {this.state.tasks.filter(t => t.status.state === status).length}\n                  </Badge>\n                )\n              : ''\n          ))\n        }\n        {\n          [0, 1].map(result => (\n            (this.state.builds.filter(b => b.result === result).length)\n              ? (\n                  <Badge style={{ margin: '0 1px' }} variant={this.badgeVariants[this.travisBuildResults[result]]} title={this.travisBuildResults[result] + ': ' + this.state.builds.filter(b => b.result === result).length}>\n                    {this.state.builds.filter(b => b.result === result).length}\n                  </Badge>\n                )\n              : ''\n          ))\n        }\n        )\n        {\n          (this.state.showAllTasks)\n            ? <Tasks tasks={this.state.tasks} rootUrl={'https://' + (new URL(this.props.status.target_url)).hostname} />\n            : (\n                <ul>\n                  {\n                    (this.state.tasks.filter(t => t.task.metadata.name.startsWith('04 :: generate') && t.status.state === 'completed').map(task => (\n                      <Task task={task} rootUrl={'https://' + (new URL(this.props.status.target_url)).hostname} />\n                    )))\n                  }\n                </ul>\n              )\n        }\n      </li>\n    );\n  }\n}\n\nexport default Status;\n","import React from 'react'\nimport Status from './Status';\n\nclass Statuses extends React.Component {\n  render() {\n    return (\n      <ul>\n        {\n          this.props.contexts.map((context, cI) => (\n            <li key={cI}>\n              { context }\n              <ul>\n              {\n                // only show pending statuses if there are no others (eg: failed/completed)\n                (this.props.statuses.some(s => s.context === context && s.state !== 'pending'))\n                  ? this.props.statuses.filter(s => s.context === context && s.state !== 'pending').map((status) => (\n                    <Status status={status} key={status.id} />\n                  ))\n                  : this.props.statuses.filter(s => s.context === context).map((status) => (\n                    <Status status={status} key={status.id} />\n                  ))\n              }\n              </ul>\n            </li>\n          ))\n        }\n      </ul>\n    );\n  }\n}\n\nexport default Statuses;\n","import React from 'react'\nimport Card from 'react-bootstrap/Card';\nimport Row from 'react-bootstrap/Row';\nimport Image from 'react-bootstrap/Image';\nimport CommitMessage from './CommitMessage';\nimport Statuses from './Statuses';\n\nclass Commit extends React.Component {\n  state = {\n    contexts: [],\n    statuses: []\n  };\n  /*\n  note: to run locally, a cors proxy is required.\n\n  to install a local cors proxy:\n  $ sudo npm install -g local-cors-proxy\n\n  to run a local cors proxy with authenticated github requests:\n  $ lcp --proxyUrl https://grenade:$(pass github/grenade/token/cloud-image-builder)@api.github.com\n  */\n\n  componentDidMount() {\n    fetch(\n      (window.location.hostname === 'localhost')\n        ? 'http://localhost:8010/proxy/repos/mozilla-platform-ops/cloud-image-builder/commits/' + this.props.commit.sha + '/statuses'\n        : 'https://grenade-cors-proxy.herokuapp.com/https://api.github.com/repos/mozilla-platform-ops/cloud-image-builder/commits/' + this.props.commit.sha + '/statuses'\n    )\n    .then(responseGithubApiStatuses => responseGithubApiStatuses.json())\n    .then((githubCommitStatuses) => {\n      if (githubCommitStatuses.length) {\n        this.setState(state => ({\n          contexts: [...new Set(githubCommitStatuses.map(s => s.context))].sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase())),\n          statuses: githubCommitStatuses//.filter(s => s.state !== 'pending')\n        }));\n      }\n    })\n    .catch(console.log);\n  }\n\n  render() {\n    return (\n      <li style={{ marginTop: '10px' }}>\n        <Row>\n          <Card style={{ width: '100%' }}>\n            <Card.Header>\n              {\n                new Intl.DateTimeFormat('en-GB', {\n                  year: 'numeric',\n                  month: 'short',\n                  day: '2-digit',\n                  hour: 'numeric',\n                  minute: 'numeric',\n                  timeZoneName: 'short'\n                }).format(new Date(this.props.commit.committer.date))\n              }\n              &nbsp;\n              <a href={this.props.commit.url}>\n                { this.props.commit.sha.substring(0, 7) }\n              </a>\n              <Image\n                src={this.props.commit.author.avatar}\n                alt={this.props.commit.author.name}\n                title={this.props.commit.author.name}\n                rounded={true}\n                style={{ width: '30px', height: '30px', marginLeft: '10px' }}\n                className=\"float-right\" />\n              <span className=\"float-right\">\n                { this.props.commit.author.username }\n              </span>\n            </Card.Header>\n            <Card.Body>\n              <pre>\n                { this.props.commit.message.join('\\n') }\n              </pre>\n              <CommitMessage message={this.props.commit.message} />\n              <Statuses contexts={this.state.contexts} statuses={this.state.statuses} />\n            </Card.Body>\n          </Card>\n        </Row>\n      </li>\n    );\n  }\n}\n\nexport default Commit;\n","import React from 'react'\nimport Commit from './Commit';\n\nclass Commits extends React.Component {\n  render() {\n    return (\n      <ul style={{\n        listStyle: 'none',\n        marginLeft: '0',\n        paddingLeft: '0'\n      }}>\n        {\n          this.props.commits.map(commit => (\n            <Commit commit={commit} key={commit.sha} />\n          ))\n        }\n      </ul>\n    );\n  }\n}\n\nexport default Commits;\n","import React from 'react'\nimport Commits from './Commits';\nimport Container from 'react-bootstrap/Container';\n\nclass App extends React.Component {\n  state = {\n    commits: []\n  };\n  /*\n  note: to run locally, a cors proxy is required.\n\n  to install a local cors proxy:\n  $ sudo npm install -g local-cors-proxy\n\n  to run a local cors proxy with authenticated github requests:\n  $ lcp --proxyUrl https://grenade:$(pass github/grenade/token/cloud-image-builder)@api.github.com\n  */\n\n  componentDidMount() {\n    fetch(\n      (window.location.hostname === 'localhost')\n        ? 'http://localhost:8010/proxy/repos/mozilla-platform-ops/cloud-image-builder/commits'\n        : 'https://grenade-cors-proxy.herokuapp.com/https://api.github.com/repos/mozilla-platform-ops/cloud-image-builder/commits'\n    )\n    .then(responseGithubApiCommits => responseGithubApiCommits.json())\n    .then((githubCommits) => {\n      if (githubCommits.length) {\n        this.setState(state => ({\n          commits: githubCommits.map(c => ({\n            sha: c.sha,\n            url: c.html_url,\n            author: {...c.commit.author, ...{ id: c.author.id, username: c.author.login, avatar: c.author.avatar_url }},\n            committer: {...c.commit.committer, ...{ id: c.committer.id, username: c.committer.login, avatar: c.committer.avatar_url }},\n            message: c.commit.message.split('\\n').filter(line => line !== ''),\n            verification: c.commit.verification\n          }))\n        }));\n      } else {\n        console.log(githubCommits)\n      }\n    })\n    .catch(console.log);\n  }\n\n  render() {\n    return (\n      <Container>\n        <Commits commits={this.state.commits} />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}